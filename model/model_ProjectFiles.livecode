script "model_ProjectFiles"
--> MetaData
-
license: GPLv3
name: model_ProjectFiles
type: model
version: 0.6

/*
function project_ListFolders projectFolder
   -- was "lcw_ListFolders"
   -- see also library_ListProjectFolders
   
   if char -1 of projectFolder is not slash then put slash after projectFolder
   put the defaultfolder into oDefault
   set the defaultfolder to projectFolder
   put the folders into standardFolders
   if pIncludeInvisible is true then return standardFolders
   
   repeat for each line someFolder in standardFolders
      switch
         case char 1 of someFolder = "."
            next repeat
         case someFolder = "livecodeworld"
            -- a place to put metadata and complex stuff we don't need to run the project
            next repeat
         default
            put projectFolder & someFolder & CR after filteredFolders
      end switch
   end repeat
   delete char -1 of filteredFolders
   return filteredFolders
end project_ListFolders

function project_ListFolders projectFolder
   if char -1 of projectFolder is not slash then put slash after projectFolder
   put the defaultfolder into oDefault
   set the defaultfolder to projectFolder
   put the folders into standardFolders
   if pIncludeInvisible is true then return standardFolders
   
   repeat for each line someFolder in standardFolders
      switch
         case char 1 of someFolder = "."
            next repeat
         case someFolder = "livecodeworld"
            -- a place to put metadata and complex stuff we don't need to run the project
            next repeat
         default
            put projectFolder & someFolder & CR after filteredFolders
      end switch
   end repeat
   delete char -1 of filteredFolders
   return filteredFolders
end project_ListFolders   
*/

--> Working on
-
getprop project_UsedStackPaths
   put the project_Folder of the target into projectFolder
   put project_ListUsedStackPaths (projectFolder) into projectUsedStackPaths  
   return projectUsedStackPaths
end project_UsedStackPaths


--> Project | Array | Model | Files
-
getprop project_JsonFile
   put the stack_Name of the target into stackName
   put project_GetJsonFile (stackName) into arrayFile
   return arrayFile
end project_JsonFile

function project_GetJsonFile stackName
   put project_GetFolder (stackName, "lcw_project.json") into arrayFile
   return arrayFile
end project_GetJsonFile

getprop project_ArrayFile
   put the stack_Name of the target into stackName
   put project_GetArrayFile (stackName) into arrayFile
   return arrayFile
end project_ArrayFile

function project_GetArrayFile stackName
   put project_GetFolder (stackName, "lcw_project.array") into arrayFile
   return arrayFile
end project_GetArrayFile


--> Project | File | Props
-
getprop project_Folder [folderName]
   put the stack_Name of the target into stackName
   put project_SearchForProjectFolder (stackName) into projectFolder
   if projectFolder is empty then
      return empty
   end if
   
   text_AddTrailing projectFolder, slash
   if folderName is not empty then
      if char 1 of folderName = slash then delete char 1 of folderName
      put folderName after projectFolder
   end if
   return projectFolder
end project_Folder

getprop project_FindFolder
   put the stack_Name of the target into stackName
   put project_SearchForProjectFolder (stackName) into projectFolder
   return projectFolder
end project_FindFolder

getprop project_Folders [pIncludeInvisible]
   put the project_Folder of the target into projectFolder
   put project_ListFolders (projectFolder) into standardFolders
   return standardFolders
end project_Folders

getprop project_StackNames [folderName]
   put the project_Folder [folderName] of the target into standardFolder
   if standardFolder is empty then return empty
   put folder_ListStackNames (standardFolder) into stackNames
   return stackNames
end project_StackNames

getprop project_StackObjects [folderName]
   put the project_Folder [folderName] of the target into standardFolder
   if standardFolder is empty then return empty
   put folder_ListStackObjects (standardFolder) into stackObjects
   return stackObjects
end project_StackObjects

getprop project_StackPaths [folderName]
   -- if the folder does not exist this handler return empty
   put the project_Folder [folderName] of the target into standardFolder
   if standardFolder is empty then return empty
   
   -- ensures the returned long paths are valid references to stacks that exist
   put folder_ListStackPaths (standardFolder) into stackPaths
   return stackPaths
end project_StackPaths

getprop project_StackFiles
   put the project_HomeStack of the target into projectHomeStack
   put the stackfiles of projectHomeStack into stackFileTable
   return stackFileTable
end project_StackFiles

setprop project_StackFiles stackFileTable
   put the project_HomeStack of the target into projectHomeStack
   set the stackfiles of projectHomeStack to stackFileTable
   return projectHomeStack
end project_StackFiles

getprop project_NeededStackFiles
   put the project_NeededStackFileArray of the target into stackFileTable
   combine stackFileTable using CR and comma 
   sort stackFileTable by item 1 of each
   return stackFileTable
end project_NeededStackFiles

getprop project_NeededStackFileArray
   local homeStackFileArray
   put the project_Folder of the target into projectFolder
   put project_ConstructNeededStackFileArray (projectFolder) into stackFileArray
   return stackFileArray
end project_NeededStackFileArray

setprop project_NeededStackFileArray homeStackFileArray
   -- constructs a stackfile table from the array
   -- sets the script-only home stacks stackfiles to the result
   -- this data is lost when saving script-only stack
   -- set this property dynamically when intialising the environment
   
   put the project_HomeStack of the target into projectHomeStack
   put homeStackFileArray into stackFileCSV
   combine stackFileCSV using CR and comma 
   sort stackFileCSV by item 1 of each
   set the stackfiles of projectHomeStack to stackFileCSV
   return stackFileCSV
end project_NeededStackFileArray


--> Project | Names
-
function project_GetCurrentName
   -- was "project_GetCurrentName"
   global gLibrarySet_Array
   put gLibrarySet_Array ["metadata"]["library_SetName"] into projectName
   if projectName is empty then put "Default" into projectName
   return projectName
end project_GetCurrentName

command project_SetCurrentName pSetName
   -- was "library_SetSetName"
   global gLibrarySet_Array
   if pSetName is empty then put "Default" into pSetName
   put pSetName into gLibrarySet_Array ["metadata"]["library_SetName"]
end project_SetCurrentName


--> Project | Array | Model | Files | Array
-
function project_ConstructNeededStackFileArray projectFolder
   local stackFileArray
   put project_ListFolders (projectFolder) into standardFolders
   repeat for each line standardFolder in standardFolders
      put folder_ConstructStackNameArray (standardFolder, projectFolder) into newStackFileArray
      union stackFileArray with newStackFileArray
   end repeat
   return stackFileArray
end project_ConstructNeededStackFileArray

function project_ConstructStackFiles projectName
   local homeStackFileArray
   put the project_Folder of the target into homeFolder
   put project_ListFolders (homeFolder) into standardFolders
   repeat for each line standardFolder in standardFolders
      put folder_ConstructStackNameArray (standardFolder, homeFolder) into stackNameArray
      union homeStackFileArray with stackNameArray
   end repeat
   return homeStackFileArray
end project_ConstructStackFiles


--> Project | Folder
-
/*
Here is a list of naming conventions we use for projects:

A project has a home stack.
The home stack is often a script only stack, but this is not required.
The short name of the homestack is the name of the project.
The short file of the homestack is the name of the project followed by ".livecode" (eg "lcw.livecode").
We use the ".livecode" regardless of whether the stack is a script only stack to make it easier to derive the path from the project name and therfore locate.
The short file of the homestack is in lower case (eg "lcw.livecode" not "LCW.livecode")
*/

function project_GetFolder stackName, pSubFolderPath
   put library_FetchProjectFolder (stackName, pSubFolderPath) into projectFolder
   if projectFolder is empty then
      if exists (stack stackName) is false then return empty
      put project_SearchForProjectFolder (stackName) into projectFolder
      if projectFolder is empty then
         return empty
      end if
   end if
   text_AddTrailing projectFolder, slash
   if pSubFolderPath is not empty then
      if char 1 of pSubFolderPath = slach then delete char 1 of pSubFolderPath
      put pSubFolderPath after projectFolder
   end if
   return projectFolder
end project_GetFolder


--> Project | Array | Model | Files | Names
-
function project_GetArrayFolder projectArray
   put projectArray ["projectPrefsArray"]["gPrefs_Array"]["libraryRepoFolder"] into projectFolder
   return projectFolder
end project_GetArrayFolder

command project_SetArrayFolder @projectArray, projectFolder
   put projectFolder into projectArray ["projectPrefsArray"]["gPrefs_Array"]["libraryRepoFolder"]
   return projectArray
end project_SetArrayFolder


--> Project | Folder | Search
-
function project_SearchForProjectFolder projectName
   -- would be better to use projectname_home.livecode for the project home stacks name filename.
   -- search for stack named the same as folder
   if exists (stack projectName) is false then return empty
   
   set the itemdelimiter to slash
   put the effective filename of stack projectName into testFolder
   delete item -1 of testFolder
   put the number of items of testFolder into maxItemNum
   repeat with itemNum = maxItemNum down to 1
      put item -1 of testFolder into folderName
      
      put folderName & ".livecode" into shortStackFile
      put testFolder & slash & shortStackFile into testProjectStackPath
      
      if exists (stack testProjectStackPath) and the scriptonly of stack testProjectStackPath is true then
         -- could test to see if it really is a project stack
         return testFolder
      end if
      
      delete item -1 of testFolder
   end repeat
   return empty
end project_SearchForProjectFolder

function project_FolderAboveFile objectFile
   put library_ListProjectFolders() into projectFolders
   repeat for each line projectFolder in projectFolders
      if objectFile begins with projectFolder then
         return projectFolder
      end if
   end repeat
   return empty
end project_FolderAboveFile


--> Deps
-
function folder_ConstructStackNameArray someFolder, pHomeFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the short name of stack stackFilePath into stackName
         if pHomeFolder is not empty then
            -- make a relative path
            replace pHomeFolder with empty in stackFilePath
         end if
         put stackFilePath into stackNameArray [stackName]
      end if
   end repeat
   set the defaultfolder to oFolder
   return stackNameArray
end folder_ConstructStackNameArray


--> Library | Project | Folders
-
function library_FetchProjectFolder projectName, pSubFolderPath
   -- library_GetProjectFolder
   -- project_GetFolderFromArray
   put library_FetchProjectArray (projectName) into projectArray
   put project_GetArrayFolder (projectArray) into projectFolder
   if projectFolder is empty then return projectFolder
   text_AddTrailing projectFolder, slash
   if char 1 of pSubFolderPath = slash then delete char 1 of pSubFolderPath
   put pSubFolderPath after projectFolder
   
   if there is a folder projectFolder then
      return projectFolder
   else
      return empty
   end if
end library_FetchProjectFolder   

command library_StoreProjectFolder projectName, projectFolder   
   put library_FetchProjectArray (projectName) into projectArray
   
   project_SetArrayFolder projectArray, projectFolder
   put projectName into projectArray ["metadata"]["library_SetName"]
   
   library_StoreProjectArray projectName, projectArray
end library_StoreProjectFolder

function library_ListProjectFolders
   put library_FetchProjectData() into libraryProjectArray
   repeat for each key projectName in libraryProjectArray
      put libraryProjectArray [projectName]["projectPrefsArray"]["gPrefs_Array"]["libraryRepoFolder"] into libraryRepoFolder
      if there is not a folder libraryRepoFolder then
         -- put merge ("Error, libraryRepoFolder for project [[projectName]] does not exist. [[libraryRepoFolder]]")
         next repeat
      end if
      put projectName into libraryRepoFolderArray [libraryRepoFolder]
   end repeat
   put keys (libraryRepoFolderArray) into libraryRepoFolders
   sort libraryRepoFolders
   return word 1 to -1 of libraryRepoFolders
end library_ListProjectFolders

