script "LCW"
--> Metadata
-
license: GPLv3
name: LCW
type: home
version: 0.7

/*
This is the Livecode Wolrd Home stack.

Here we experiment with a minimal script-only definition of a general project home stack.
It should do everything that is needed to get the project up and running, but nothing more.
It should:

-  have no dependencies
-  not depend on script introspection
-  use robust file naming concentions
-  human readable and easy to parse in any language
-  a simple text stack that plays well with revision control

This is a new beginning.

function project_ConstructStackFileArray projectFolder
   if the platform = "MacOS" then
      put spotlight_ListStacks (projectFolder) into projectStackFiles
      put stackfile_ArrayFromPaths (projectStackFiles, projectFolder) into projectStackFileArray
   else
      -- this is not recursive and only returns toplevel stacks
      put project_ConstructNeededStackFileArray (projectFolder) into projectStackFileArray
   end if
   return projectStackFileArray
end project_ConstructStackFileArray

function project_ConstructStackFileArray projectFolder
   put project_ConstructNeededStackFileArray (projectFolder) into projectStackFileArray
   return projectStackFileArray
end project_ConstructStackFileArray

function stackfile_TableFromPaths stackPaths, baseFolder
   put stackfile_ArrayFromPaths (stackPaths, baseFolder) into stackFileArray
   put stackFile_FromArray (stackFileArray) into stackFileTable
   return stackFileTable
end stackfile_TableFromPaths

function stackfile_ArrayFromPaths stackPaths, baseFolder
   local stackFileArray
   stackFile_AddToArray stackFileArray, stackPaths, baseFolder
   return stackFileArray
end stackfile_ArrayFromPaths

function spotlight_ListStacks pInsideFolder
   put "(kMDItemKind = 'LiveCode Stack')" into queryExpression
   put "mdfind" && quote & queryExpression & quote into someShell
   
   if pInsideFolder is not empty then
      -- shell_BashParamEscape pInsideFolder
      put space & "-onlyin" && quote & pInsideFolder & quote after someShell
   end if
   
   put shell (someShell) into shellResult
   return shellResult
end spotlight_ListStacks

private command _CheckOrCreateProjectHome projectFolder, projectName
   put project_ConstructHomeStackPath (projectFolder) into projectHomeStackPath
   if exists (stack projectName) is false then
      create script only stack projectName
      set the filename of stack projectName to projectHomeStackPath
      save stack projectName
      edit the script of stack projectName
   else   
      put the filename of stack projectName into testHomeStackPath
      if testHomeStackPath is not projectHomeStackPath then
         put projectHomeStackPath & CR & testHomeStackPath
         go to stack projectName
         answer warning merge ("There already is a stack '[[projectName]]'  and it is not in the project folder!")
         edit the script of stack projectName
         exit to top
      end if
   end if
end _CheckOrCreateProjectHome

function project_ConstructHomeStackPath projectFolder
   put project_NameFromFolder (projectFolder) into projectName
   put projectFolder & projectName & ".livecode" into projectHomeStackPath
   return projectHomeStackPath
end project_ConstructHomeStackPath


-- command project_SetHomeStackFiles projectFolder
-- here we create a project home stack if it does not exist
put project_NameFromFolder (projectFolder) into projectName
_CheckOrCreateProjectHome projectFolder, projectName

put project_ListAllStacks (projectFolder) into projectStackFiles
set the stackfiles of stack projectName to projectStackFiles
return projectStackFiles
end project_SetHomeStackFiles

function lcw_ListAllStackPaths
   put lcw_GetRootFolder() into lcwRootFolder
   put folder_ListNestedStackPaths (lcwRootFolder) into stackPaths
   return stackPaths
end lcw_ListAllStackPaths
*/


--> LCW | Files
-
function lcw_BehaviorPaths
   put the stack_Folder of me into projectFolder
   put project_ListStackPaths ("behavior", projectFolder) into bPaths
   return bPaths
end lcw_BehaviorPaths


--> Project | Save and Load
-
command project_SaveEnvironment
end project_SaveEnvironment


--> Working on
-


--> Initialise
-
private command _StartEnvironment
   _CreateMenuButton
   env_AddToBash
   
   put the stack_Folder of me into projectFolder
   set the project_InitialiseFolder of me to projectFolder
   
   _LoadCustomUserProject
   dispatch "project_IndexAfterUsed" with projectFolder
end _StartEnvironment

command _LoadCustomUserProject
   put lcw_UserProjectFolder() into projectFolder
   put lcw_UserHomeStack() into lcwUserHomeStack
   set the project_InitialiseFolder of lcwUserHomeStack to projectFolder
end _LoadCustomUserProject

setprop project_InitialiseFolder projectFolder
   put project_ConstructStackFiles (projectFolder) into lcwStackFiles
   set the stackfiles of the target to lcwStackFiles
   project_StartUsedFolder projectFolder
   project_LoadMenus projectFolder
   return projectFolder
end project_InitialiseFolder

command project_LoadEssentials projectFolder
   set the project_InitialiseFolder of me to projectFolder
   put the result into projectFolder
   return projectFolder
end project_LoadEssentials

command project_StartUsedFolder projectFolder
   put project_ListUsedStackPaths (projectFolder) into stackPaths
   repeat for each line stackPath in stackPaths
      if exists (stack stackPath) is false then
         breakpoint -- should exist
         next repeat
      end if
      start using stack stackPath
   end repeat
end project_StartUsedFolder

command project_LoadMenus projectFolder
   put project_GetStandardFolder ("controller", projectFolder) into standardFolder
   put folder_ListStackPaths (standardFolder) into stackPaths
   project_IndexGlobalMenus stackPaths
   put the result into gMenuArray
   return gMenuArray
end project_LoadMenus

command project_IndexGlobalMenus longStackFiles
   -- does not export handlers
   local gMenuArray
   global gTemp_ActiveMenuArray
   delete variable gTemp_ActiveMenuArray
   
   repeat for each line longStackFile in longStackFiles
      if exists (stack longStackFile) is false then
         next repeat
      end if
      put the name of stack longStackFile into stackObject
      try
         -- could speed up by setting to false or just getting and then doing a union at the end of the repeat loop?
         set the menu_Update of stackObject to true -- false
         put the result into mTitleArray
      catch e
         put stackObject & CR after problemMenus
      end try
      union gMenuArray with mTitleArray
   end repeat
   
   if problemMenus is not empty then
      put problemMenus
      answer warning "The following menus have problems being indexed!"
   end if
   return gMenuArray
end project_IndexGlobalMenus

private command _CreateMenuButton
   -- this should be part of the new script-only  menu library 
   -- in case we call this handler more that once, do not create multiple buttons
   if the menu_Button of me is empty then
      -- this should be a "menu" button
      create button "Global Menu Button"
      put it into createdObject
      set the style of createdObject to "menu"
      set the menumode of createdObject to "popup"
      set the backgroundcolor of createdObject to "green" -- for no reason
      
      put "on menuPick menuPath" into someScript
      put CR & "   menu_SendMessage menuPath" after someScript
      put CR & "end menuPick" after someScript
      set the script of createdObject to someScript
      
      -- set the visible of me to true
      choose browse tool
   end if
end _CreateMenuButton


--> Project
-
function project_NameFromFolder projectFolder
   set the itemdelimiter to slash
   put item -1 of projectFolder into projectName
   return projectName
end project_NameFromFolder
 

--> Project | Files
-
function project_ListUsedStackPaths projectFolder
   local projectUsedStackPaths
   repeat for each item shortFolder in "library,model,used"
      put project_GetStandardFolder (shortFolder, projectFolder) into standardFolder
      put folder_ListStackPaths (standardFolder) into stackPaths
      put stackPaths & CR after projectUsedStackPaths
   end repeat
   sort projectUsedStackPaths
   put word 1 to -1 of projectUsedStackPaths into projectUsedStackPaths
   return projectUsedStackPaths
end project_ListUsedStackPaths

function project_ListFolders projectFolder
   if char -1 of projectFolder is not slash then put slash after projectFolder
   put the defaultfolder into oDefault
   set the defaultfolder to projectFolder
   put the folders into standardFolders
   if pIncludeInvisible is true then return standardFolders
   
   repeat for each line someFolder in standardFolders
      switch
         case char 1 of someFolder = "."
            next repeat
         case someFolder = "livecodeworld"
            -- a place to put metadata and complex stuff we don't need to run the project
            next repeat
         default
            put projectFolder & someFolder & slash & CR after filteredFolders
      end switch
   end repeat
   delete char -1 of filteredFolders
   return filteredFolders
end project_ListFolders   

function project_ListStackPaths shortFolder, projectFolder
   -- lists only the top-level stacks in the projectFolder
   put project_GetStandardFolder (shortFolder, projectFolder) into standardFolder
   put folder_ListStackPaths (standardFolder) into stackPaths
   return stackPaths
end project_ListStackPaths

function project_ConstructStackFiles projectFolder
   put project_ConstructNeededStackFileArray (projectFolder) into projectStackFileArray
   put stackFile_FromArray (projectStackFileArray) into projectStackFiles
   return projectStackFiles
end project_ConstructStackFiles

function project_GetStandardFolder shortFolder, projectFolder
   text_AddTrailing projectFolder, slash
   put projectFolder & shortFolder & "/" into standardFolder
   if there is not a folder standardFolder then return empty
   return standardFolder
end project_GetStandardFolder

function project_ConstructNeededStackFileArray projectFolder
   -- should use nested or spotlight "project_ConstructStackFileArray"
   local stackFileArray
   put project_ListFolders (projectFolder) into standardFolders
   repeat for each line standardFolder in standardFolders
      if standardFolder ends with "/view/" then
         put project_ListFolders (standardFolder) into viewFolders
         repeat for each line viewFolder in viewFolders
            put folder_ConstructStackNameArray (viewFolder, projectFolder) into viewFolderStackFileArray
            union stackFileArray with viewFolderStackFileArray
         end repeat
      end if
      
      put folder_ConstructStackNameArray (standardFolder, projectFolder) into newStackFileArray
      union stackFileArray with newStackFileArray
   end repeat
   return stackFileArray
end project_ConstructNeededStackFileArray


--> Deps
-
command env_AddToBash
   -- put "/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin" into $PATH
   if the platform = "MacOS" then -- and it is recent ???
      put url "file:/etc/paths" into systemPaths
      if systemPaths is empty then return empty
      
      put token 1 to -1 of systemPaths into systemPathArray
      
      put $PATH into revPATH
      replace ":" with CR in revPATH
      put systemPathArray & CR & revPATH into combinedPath
      sort combinedPath
      put token 1 to -1 of combinedPath into combinedPath
      split combinedPath with CR and ":"
      put keys (combinedPath) into newPathIndex
      replace CR with ":" in newPathIndex
      put newPathIndex into $PATH
   end if
   return $PATH
end env_AddToBash

function folder_ListStackPaths someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put stackFilePath & CR after stackFilePaths
      end if
   end repeat
   delete char -1 of stackFilePaths
   set the defaultfolder to oFolder
   return stackFilePaths
end folder_ListStackPaths

function folder_ConstructStackNameArray someFolder, pHomeFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the short name of stack stackFilePath into stackName
         if pHomeFolder is not empty then
            -- make a relative path
            replace pHomeFolder with empty in stackFilePath
         end if
         put stackFilePath into stackNameArray [stackName]
      end if
   end repeat
   set the defaultfolder to oFolder
   return stackNameArray
end folder_ConstructStackNameArray

command folder_CreateNested @someFolder
   text_AddTrailing someFolder, slash
   if there is a folder someFolder then return empty
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of someFolder
      put item 1 to itemNum of someFolder & "/" into testFolder
      if there is a folder testFolder then next repeat
      create folder testFolder
   end repeat
end folder_CreateNested

getprop stack_Folder
   put the effective filename of the target into stackFolder
   set the itemdelimiter to slash
   put empty into item -1 of stackFolder
   return stackFolder
end stack_Folder

function stackFile_FromArray stackFileArray
   combine stackFileArray using CR and comma
   sort stackFileArray
   return stackFileArray
end stackFile_FromArray

command text_AddTrailing @someText, someChar
   if char -1 of someText is not someChar then
      put someChar after someText
   end if
end text_AddTrailing


--> Objects
-
getprop menu_Button
   -- works but we need to fix dynamic menu button creation
   if exists (button "Global Menu Button" of cd 1 of me) is false then pass menu_Button
   return the long id of button "Global Menu Button" of cd 1 of me
end menu_Button


--> LCW | Folder
-
function lcw_UserHomeStack
   put lcw_UserProjectFolder() into userFolder
   put lcw_UserHomeStackName() into lcwUserHomeStackName
   put userFolder & lcwUserHomeStackName & ".livecodescript" into userHomePath
   if exists (stack userHomePath) is false then
      create script only stack lcwUserHomeStackName
      set the filename of stack lcwUserHomeStackName to userHomePath
      save stack lcwUserHomeStackName
   end if 
   return the name of stack lcwUserHomeStackName
end lcw_UserHomeStack

function lcw_UserHomePath
   put lcw_UserProjectFolder() into userFolder
   put lcw_UserHomeStackName() into lcwUserHomeStackName
   put userFolder & lcwUserHomeStackName & ".livecodescript" into userHomePath
   return userHomePath
end lcw_UserHomePath
 
function lcw_UserHomeStackName
   put lcw_UserProjectFolder() into userProjectFolder
   put project_NameFromFolder (userProjectFolder) into lcwUserHomeStackName
   return lcwUserHomeStackName
end lcw_UserHomeStackName

function lcw_UserProjectFolder pSubFolder
   put revEnvironmentUserPluginsPath() & "/lcw_User/" into userProjectFolder
   if pSubFolder is not empty then
      if char 1 of pSubFolder is slash then delete char 1 of pSubFolder
      text_AddTrailing pSubFolder, slash
      put pSubFolder after userProjectFolder
   end if
   folder_CreateNested userProjectFolder
   return userProjectFolder
end lcw_UserProjectFolder

function lcw_GetStandardFolder shortFolder
   put lcw_GetRootFolder() into lcwRootFolder
   put project_GetStandardFolder (shortFolder, lcwRootFolder) into lcwStandardFolder
   return lcwStandardFolder
end lcw_GetStandardFolder

function lcw_GetRootFolder
   return the stack_Folder of me
end lcw_GetRootFolder


---> Events
-
on preOpenStack
   -- bug:  revSaving sends openStack and preOpenStack is sent every time any stack is saved ???
   -- should be sent to the first card of this stack
   -- but targetStackName is "revSaving"
   if the shiftKey is "down" then pass preOpenStack
   
   put the short name of the defaultstack into targetStackName -- same as the stack_Name
   put the short name of me into myName
   if targetStackName is not myName then
      pass preOpenStack
   else
      start using me
   end if
end preOpenStack

on libraryStack
   set the loc of me to the screenloc
   -- show me
   put the short name of the target into targetStackName
   put the short name of me into myName
   if targetStackName is not myName then
      pass libraryStack
   else
      _StartEnvironment
   end if
end libraryStack
