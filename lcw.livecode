script "LCW"
--> Metadata
-
license: GPLv3
name: LCW
type: home
version: 0.1

/*
This is the Livecode Wolrd Home stack.

Here we experiment with a minimal script-only definition of a general project home stack.
It should do everything that is needed to get the project up and running, but nothing more.
It should:

-  have no dependencies
-  not depend on script introspection
-  use robust file naming concentions
-  human readable and easy to parse in any language
-  a simple text stack that plays well with revision control

This is a new beginning.
*/


--> Initialise
-
/*
When initialising we use "me" not "the target".
These are not library functions. To be robust they should only work in the context of this stack.
These handlers are private as we want to control how this stack is used to keep everything simple.

-- see related "project_StartEnvironment" and "project_StopEnvironment"
*/

private command _StartEnvironment
   _CreateMenuButton
   
   _KnowStacks
   _LoadGlobals
   _StartUsed
   
   bash_AddSystemPathsToPATH
   
   -- how do we know which project to load?
   _LoadAfterUsingLibraries "default"
   
   return the result
end _StartEnvironment

private command _LoadAfterUsingLibraries projectName
   -- the code beow requires the above libraries to be used
   -- should be stored as arrays in the projects folder
   -- hack for now (we use "default")
   
   loadGlobals projectName
   
   lcw_IndexAllScripts -- this adds to any previously loaded hArray (as in above)
   return the result
end _LoadAfterUsingLibraries

command loadGlobals projectName
   project_LoadGlobalPrefs projectName
   project_LoadGlobalHarray projectName -- this clobbers any previously loaded hArray
   project_LoadGlobalArray projectName
end loadGlobals


--> Currently Working On
-
private command _CreateMenuButton
   -- this should be part of the new script-only  menu library 
   -- in case we call this handler more that once, do not create multiple buttons
   if the menu_Button of me is empty then
      -- this should be a "menu" button
      create button "Global Menu Button"
      put it into createdObject
      set the style of createdObject to "menu"
      set the menumode of createdObject to "popup"
      set the backgroundcolor of createdObject to "green" -- for no reason
      
      put "on menuPick menuPath" into someScript
      put CR & "   menu_SendMessage menuPath" after someScript
      put CR & "end menuPick" after someScript
      set the script of createdObject to someScript
      
      -- set the visible of me to true
      choose browse tool
   end if
end _CreateMenuButton

command lcw_IndexGlobalMenus longStackFiles
   -- does not export handlers
   repeat for each line longStackFile in longStackFiles
      put the name of stack longStackFile into stackObject
      
      -- this is available after model_ScriptMenu is loaded
      -- this breaks the rule about no dependencies (factor it out)
      script_UpdateAndExport stackObject
      put the result into mTitleTableArray
   end repeat
end lcw_IndexGlobalMenus

command _LoadMenus
   put the project_StackPaths ["controller"] of me into longStackFiles
   lcw_IndexGlobalMenus longStackFiles
end _LoadMenus

command lcw_IndexAllScripts pHomeStackName
   if pHomeStackName is empty then
      -- put the stack_Name of the target into pHomeStackName
      put the short name of me into pHomeStackName
   end if
   
   put the project_Folder of stack pHomeStackName into homeFolder
   standard_IndexAllScripts homeFolder
   put the result into stackPathProblems
   if stackPathProblems is not empty then put stackPathProblems
   -- put "OK" & CR & stackPathProblems
end lcw_IndexAllScripts

command standard_IndexAllScripts homeFolder, pExportHandlers
   -- has lot's of dependencies 
   -- but wrapped in "try"
   
   put lcw_ListFolders (homeFolder) into standardFolders
   set the itemdelimiter to slash
   repeat for each line standardFolder in standardFolders
      put folder_ListStackPaths (standardFolder) into stackPaths
      repeat for each line stackPath in stackPaths
         set the cursor to busy
         put the long id of stack stackPath into stackObject
         
         switch item -1 of standardFolder
            case "view"
               -- let's just index the views script (so we can add it to hArray)
               -- the assumption is teh view is the toplevel (ie control 1) of teh first card in the stack)
               -- this is of course usually a group
               if exists (control 1 of cd 1 of stackObject) then
                  try
                     put the long id of cd 1 of stackObject into viewTemplateCard
                     if pExportHandlers is true then
                        set the script_IsIndexed of viewTemplateCard to true -- may have a global menu on it
                     else
                        script_UpdateAndExport viewTemplateCard
                     end if
                     
                     -- let's add the view to the index of views available
                     put the long id of control 1 of viewTemplateCard into viewTemplate
                     if pExportHandlers is true then
                        set the script_IsIndexed of viewTemplate to true
                     else
                        script_UpdateAndExport viewTemplate
                     end if
                  catch e
                     put viewTemplateCard
                     -- answer "Error with view"
                     breakpoint
                     put viewTemplateCard & CR after stackPathProblems
                  end try
               end if
               break
            default
               -- index the stack script
               -- we should index all scripts for non-script only stacks
               
               try
                  if pExportHandlers is true then
                     set the script_IsIndexed of stackObject to true
                  else
                     script_UpdateAndExport stackObject
                  end if
               catch e
                  -- put stackObject
                  -- put the name of stackObject into stackObject
                  -- answer warning merge ("Error with [[stackObject]]")
                  breakpoint
                  script_UpdateAndExport stackObject
                  
                  put stackPath & CR after stackPathProblems
               end try
         end switch
      end repeat
   end repeat
   return stackPathProblems
end standard_IndexAllScripts


--> Events
-
on preOpenStack
   -- bug:  revSaving sends openStack and preOpenStack is sent every time any stack is saved ???
   -- should be sent to the first card of this stack
   -- but targetStackName is "revSaving" 
   put the short name of the defaultstack into targetStackName -- same as the stack_Name
   put the short name of me into myName
   if targetStackName is not myName then
      pass preOpenStack
   else
      start using me
   end if
end preOpenStack

on libraryStack
   set the loc of me to the screenloc
   -- show me
   put the short name of the target into targetStackName
   put the short name of me into myName
   if targetStackName is not myName then
      pass libraryStack
   else
      _StartEnvironment
   end if
end libraryStack


--> Props
-
getprop project_HomeStack
   -- this handler is required
   -- and must be at the root of the LCW project folder
   return the long id of me
end project_HomeStack

getprop menu_Button
   -- works but we need to fix dynamic menu button creation
   if exists (button "Global Menu Button" of cd 1 of me) is false then pass menu_Button
   return the long id of button "Global Menu Button" of cd 1 of me
end menu_Button

getprop project_Folder [folderName]
   -- assumes the project home stack exists and is at the root of the project folder
   set the itemdelimiter to slash
   put the project_HomeStack of the target into projectHomeStack   
   put the filename of projectHomeStack into standardFolder
   put folderName into item -1 of standardFolder
   if char -1 of standardFolder is not slash then put slash after standardFolder -- not required
   if there is a folder standardFolder then
      return standardFolder
   else
      return empty
   end if
end project_Folder

getprop project_Folders [pIncludeInvisible]
   put the project_Folder of the target into projectFolder
   put lcw_ListFolders (projectFolder) into standardFolders
   return standardFolders
end project_Folders

getprop project_StackPaths [folderName]
   -- if the folder does not exist this handler return empty
   put the project_Folder [folderName] of the target into standardFolder
   if standardFolder is empty then return empty
   
   -- ensures the returned long paths are valid references to stacks that exist
   put folder_ListStackPaths (standardFolder) into stackPaths
   return stackPaths
end project_StackPaths

getprop home_StackFileArray
   local homeStackFileArray
   put the project_Folder of the target into homeFolder
   put lcw_ListFolders (homeFolder) into standardFolders
   repeat for each line standardFolder in standardFolders
      put folder_ConstructStackNameArray (standardFolder, homeFolder) into stackNameArray
      union homeStackFileArray with stackNameArray
   end repeat
   return homeStackFileArray
end home_StackFileArray

setprop home_StackFileArray homeStackFileArray
   -- constructs a stackfile table from the array
   -- sets the script-only home stacks stackfiles to the result
   -- this data is lost when saving script-only stack
   -- set this property dynamically when intialising the environment
   
   put the project_HomeStack of the target into projectHomeStack
   put homeStackFileArray into stackFileCSV
   combine stackFileCSV using CR and comma 
   sort stackFileCSV by item 1 of each
   set the stackfiles of projectHomeStack to stackFileCSV
   return stackFileCSV
end home_StackFileArray


--> Initialise | Deps
-
command bash_AddSystemPathsToPATH
   -- put "/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin" into $PATH
   if the platform = "MacOS" then -- and it is recent ???
      put url "file:/etc/paths" into systemPaths
      if systemPaths is empty then return empty
      
      put token 1 to -1 of systemPaths into systemPathArray
      
      put $PATH into revPATH
      replace ":" with CR in revPATH
      put systemPathArray & CR & revPATH into combinedPath
      sort combinedPath
      put token 1 to -1 of combinedPath into combinedPath
      split combinedPath with CR and ":"
      put keys (combinedPath) into newPathIndex
      replace CR with ":" in newPathIndex
      put newPathIndex into $PATH
   end if
   return $PATH
end bash_AddSystemPathsToPATH

private command _KnowStacks
   -- a dynamic loading of all toplevel stacks
   put the home_StackFileArray of me into homeStackFileArray
   set the home_StackFileArray of me to homeStackFileArray
end _KnowStacks

private on _LoadGlobals
   -- here we load only the new and essential globals
   global gLCW
   
   -- let's mirror the folder structure
   put "Default" into gLCW ["projectName"]
   put the lcw_PrefArray of me into gLCW ["global"]["pref"] -- better name ???
   put the lcw_ControllerArray of me into gLCW ["global"]["controller"] -- for menus to work
   put the lcw_HandlerArray of me into gLCW ["global"]["handler"] -- for assisted script editing to work
end _LoadGlobals

private command _StartUsed
   -- only good references to stacks are returned from this handler
   put the project_StackPaths ["library"] of me into stackPaths
   put CR & the project_StackPaths ["model"] of me after stackPaths
   
   -- temporary while we still have a few non-script-only libraries
   put CR & the project_StackPaths ["used"] of me after stackPaths
   
   repeat for each line stackPath in stackPaths
      start using stack stackPath
   end repeat
end _StartUsed


--> Handlers
-
function lcw_ListFolders projectFolder
   if char -1 of projectFolder is not slash then put slash after projectFolder
   put the defaultfolder into oDefault
   set the defaultfolder to projectFolder
   put the folders into standardFolders
   if pIncludeInvisible is true then return standardFolders
   
   repeat for each line someFolder in standardFolders
      switch
         case char 1 of someFolder = "."
            next repeat
         case someFolder = "livecodeworld"
            -- a place to put metadata and complex stuff we don't need to run the project
            next repeat
         default
            put projectFolder & someFolder & CR after filteredFolders
      end switch
   end repeat
   delete char -1 of filteredFolders
   return filteredFolders
end lcw_ListFolders

function folder_ConstructStackNameArray someFolder, pHomeFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the short name of stack stackFilePath into stackName
         if pHomeFolder is not empty then
            -- make a relative path
            replace pHomeFolder with empty in stackFilePath
         end if
         put stackFilePath into stackNameArray [stackName]
      end if
   end repeat
   set the defaultfolder to oFolder
   return stackNameArray
end folder_ConstructStackNameArray

function folder_ListStackPaths someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put stackFilePath & CR after stackFilePaths
      end if
   end repeat
   delete char -1 of stackFilePaths
   set the defaultfolder to oFolder
   return stackFilePaths
end folder_ListStackPaths
