script "lib_View"
--> MetaData
-
license: GPLv3
name: lib_View
type: script library
version: 0.8


--> Working on
-
getprop view_Outline
   local propertyArray, someOutline
   
   put the long id of the target into targetObject
   view_SearchNested targetObject, propertyArray, someOutline, 0
   delete char -1 of someOutline
   return someOutline
end view_Outline

getprop rugged_Views
   put the view_NestedArray of the target into viewOutlineArray
   put viewOutlineArray ["@prop"] into ruggedArray
   put keys (ruggedArray) into ruggedViews
   return ruggedViews
end rugged_Views

getprop view_NestedArray
   local propertyArray
   put the long id of the target into targetObject
   view_SearchNested targetObject, propertyArray, someOutline, 0
   delete char -1 of someOutline
   put the result into objectArray
   put objectArray into nestedArray ["manifest"]
   put propertyArray into nestedArray ["@prop"]
   return nestedArray
end view_NestedArray

command view_SearchNested targetObject, @propertyArray, @someOutline, indentNum
   local objectArray  
   
   put text_RepeatString (tab, indentNum) into someIndent
   -- add 1 to indentNum
   put the view_Name of targetObject into vName
   put the abbreviated id of targetObject into containerKey
   
   if vName is not empty then
      add 1 to indentNum
      
      put vName into propertyArray [containerKey]
      put empty into objectArray [containerKey]
      put the rugged_ID of targetObject into ruggedObject
      put someIndent & html_ConstructNameLink (vName, ruggedObject) & CR after someOutline
   end if
   
   put the number of controls in targetObject into maxNum
   repeat with controlNum = 1 to maxNum -- look at contents
      put the long id of of control controlNum of targetObject into subObject
      
      put the abbreviated id of subObject into subKey
      if word 1 of subKey = "group" then
         -- recurse
         view_SearchNested subObject, propertyArray, someOutline, indentNum
         put the result into subArray -- will be a nested array
         if subArray is an array then
            put subArray [subKey] into objectArray [containerKey][subKey]
            get the extents of objectArray
         end if
         add the number of layers in subObject to controlNum
      else
         -- add plain
         put the view_Name of subObject into subViewName
         if subViewName is not empty then
            put empty into objectArray [subKey]
            put subViewName into propertyArray [subKey]
            put the rugged_ID of subObject into ruggedSubObject
            put tab & someIndent & html_ConstructNameLink (subViewName, ruggedSubObject) & CR after someOutline
         end if
      end if
   end repeat
   return objectArray
end view_SearchNested


--> View
-
getprop view_Name
   put the long id of the target into tObject
   put the view_Object of tObject into viewObject
   if exists (viewObject) is false then put tObject into viewObject
   
   put the object_MetaData of viewObject into mData
   put mData ["type"] into oType
   if oType is not "View" then return empty
   put mData ["name"] into viewName
   view_NormalizeName viewName
   return viewName
end view_Name

setprop view_Name [pComponentType] viewName
   put the long id of the target into tObject
   put the view_Object of tObject into viewObject
   if exists (viewObject) is false then put tObject into viewObject
   
   view_NormalizeName viewName
   component_SetName viewObject, viewName, pComponentType
   put the result into someScript
   return someScript
end view_Name

command component_SetName tObject, uripName, pComponentType
   if pComponentType is empty then put "view" into pComponentType
   
   put the script of tObject into someScript
   
   put the script_MetaData of tObject into uRipArray
   put uripName into uRipArray ["name"]
   put pComponentType into uRipArray ["type"]
   set the script_MetaData of tObject to uRipArray
   put the result into someScript
   return someScript
end component_SetName

command view_NormalizeName @viewPath
   if viewPath is empty then return false
   view_NormalizePiped viewPath
   set the itemdelimiter to "|"
   if item 1 of viewPath is not "View" then put "View|" before viewPath
   return true
end view_NormalizeName

command view_NormalizePiped @viewPath
   if viewPath is empty then return false
   put word 1 to -1 of viewPath into viewPath
   
   set the itemdelimiter to "|"
   repeat with itemNum = 1 to the number of items of viewPath
      put word 1 to -1 of item itemNum of viewPath into someItem
      put someItem into item itemNum of viewPath
   end repeat
   return true
end view_NormalizePiped

getprop view_GlobalMenuTitle
   put the view_Name of the target into viewName
   put menu_GlobalTitleFromViewName (viewName) into globalMenuTitle
   return globalMenuTitle
end view_GlobalMenuTitle

getprop view_Object
   return the view_AboveTarget of the target
end view_Object

getprop view_Behavior
   put the view_Object of the target into someView
   if exists (someView) then 
      return the behavior of someView
   else
      return empty
   end if
end view_Behavior

getprop view_Above
    put the long id of the target into someObject
    delete word 1 to 4 of someObject
    if exists(someObject) is false then return empty
    put the view_Object of someObject into someView
    return someView
end view_Above
 
getprop view_Hierarchy
    -- was "view_GroupHierarchy"
    put the long id of the target into testGroup
    put view_HierarchyObjects(testGroup) into groupHierarchy
    return groupHierarchy
end view_Hierarchy

getprop top_View
   -- this is the default value for a view
   -- which is the top (highest) someView in the current layout
   
   put the long id of the target into testGroup
   put view_HierarchyObjects(testGroup) into groupHierarchy
   put line 1 of groupHierarchy into topView
   return topView
end top_View

function view_GetBehavior vName
   -- first line will be the top view behavior if it has one
   put view_GetTemplateObject (vName) into templateObject
   put the behavior of templateObject into vBehavior
   return vBehavior
end view_GetBehavior

function view_HierarchyObjects testGroup
    put empty into groupHierarchy
    repeat
        -- background groups can cause infinite loops
        -- so have to stop hierarchy check at the card level
        -- which means this will not work for views etc which are at the card level or above!
         
        if word 1 of testGroup is "card" then
            return word 1 to -1 of groupHierarchy
        else
            put the view_Object of testGroup into someView
            put someView & CR before groupHierarchy
            
             put someView into testGroup
            delete word 1 to 4 of testGroup
            if testGroup is empty then
                return word 1 to -1 of groupHierarchy
            end if
        end if
    end repeat
 end view_HierarchyObjects

