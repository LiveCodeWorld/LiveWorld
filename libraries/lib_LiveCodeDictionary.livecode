script "lib_LiveCodeDictionary"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_LiveCodeDictionary
type: script library
version: 0.3

/*
*/


--> Dictionary
-
function dict_TermDescription someText
   put ideDocsFetchLCSData (someText) into tArray
   put tArray [1]["description"] into someDescription
   return someDescription
end dict_TermDescription


--> IDE | Handlers
-
function ide_IsDictionaryTerm someWord
   -- was "script_DictionaryTerm"
   if char 1 to 3 of someWord is "rev" and char 4 of someWord is not "_" then return true -- a bit risky to assume this!
   
   put ide_GetDictionaryTerms() into dictionaryTerms
   -- set the wholematches to true
   put someWord is among the lines of dictionaryTerms into someBoolean
   return someBoolean
end ide_IsDictionaryTerm

command ide_LoadDictionaryTerms
   put rev_FetchDictionaryTerms() into revDicTerms
   put ide_ListExtraDicTerms() into extraDicTerms
   put extraDicTerms & CR & revDicTerms into dTerms
   ide_SetDictionaryTerms dTerms
   return dTerms
end ide_LoadDictionaryTerms


--> Forget
-
-- role into gLCW ["Livecode Dictionary Terms"]

command ide_AddExtraDicTerm newTerm, pHKeyUsingTerm
   put ide_FetchExtraDicTermArray() into ideExtraDicTermArray
   put pHKeyUsingTerm into ideExtraDicTermArray [newTerm]
   ide_StoreExtraDicTermArray ideExtraDicTermArray
   return ideExtraDicTermArray
end ide_AddExtraDicTerm

command ide_DeleteExtraDicTerms dicTerms
   replace comma with CR in dicTerms
   put ide_FetchExtraDicTermArray() into ideExtraDicTermArray
   repeat for each line dicTerm in dicTerms
      delete variable ideExtraDicTermArray [dicTerm]
   end repeat
   ide_StoreExtraDicTermArray ideExtraDicTermArray
   return ideExtraDicTermArray
end ide_DeleteExtraDicTerms

function ide_ListExtraDicTerms
   put ide_FetchExtraDicTermArray() into ideExtraDicTermArray
   put keys (ideExtraDicTermArray) into extraDicTerms
   sort extraDicTerms
   return extraDicTerms
end ide_ListExtraDicTerms

function ide_FetchExtraDicTermArray
   put lcw_FetchArray ("ideExtraDicTermArray.array") into ideExtraDicTermArray
   return ideExtraDicTermArray
end ide_FetchExtraDicTermArray

command ide_StoreExtraDicTermArray ideExtraDicTermArray
   lcw_StoreArray "ideExtraDicTermArray.array", ideExtraDicTermArray
   return the result
end ide_StoreExtraDicTermArray


--> IDE | Libraries
-
function ide_ListScriptLibraries
   put ide_LivecodeScriptFolder() into someFolder  
   put folder_ShortFiles (someFolder) into shortFiles
   return shortFiles
end ide_ListScriptLibraries

function ide_LivecodeScriptFolder
   put revEnvironmentToolsPath() & "/Toolset/libraries/" into someFolder
   return someFolder
end ide_LivecodeScriptFolder


--> IDE | Dictionary
-
/*
These are handlers have been created to integrate with the > v8.0 Dictionary API.
*/

command ide_AddToDictionaryTerms newTerm, pHKeyUsingTerm
   put ide_GetDictionaryTerms() into dTerms
   if newTerm is not among the lines of dTerms then
      put newTerm & CR before dTerms
   end if
   ide_SetDictionaryTerms dTerms
   
   -- now store this addition in an array in the library
   ide_AddExtraDicTerm newTerm, pHKeyUsingTerm
   return dTerms
end ide_AddToDictionaryTerms

function ide_GetDictionaryTerms
   global gLCW
   put gLCW ["Livecode Dictionary Terms"] into dTerms
   return dTerms
end ide_GetDictionaryTerms

command ide_SetDictionaryTerms dTermIndex
   global gLCW
   put dTermIndex into gLCW ["Livecode Dictionary Terms"]
   return dTermIndex
end ide_SetDictionaryTerms


--> Rev | Dictionary
-
function rev_FetchDictionaryTerms
   local dictionaryTerms
   
   put ideDocsFetchLCSEntries() into scriptDictionaryArray
   
   -- some missing things from library (should get all synonyms)
   put "char" & CR after dictionaryTerms
   put "chars" & CR after dictionaryTerms
   
   _parseDictionary scriptDictionaryArray, dictionaryTerms, dicArray
   return dictionaryTerms
end rev_FetchDictionaryTerms

command rev_LookUpDictionary someText
   /*
   # Parameters
   #   pTag : the filename of the xml file that contains the entry to display
   #   pType : the type of the entry, eg "command"
   #   pFolder : either "dictionary" or "glossary"
   #   pDontUpdateHistory : if this is true, the entry will not be added to the history
   # Description
   #   Called when the user double-clicks in the dictionary grid / list. This displays the required dictionary
   #   entry fullscreen on a separate card.
   
   entryGoto pTag, pType, pFolder, false
   */
   
   -- version 3.0
   revDocumentationGo someText
end rev_LookUpDictionary


--> Rev | Dictionary | XML
-
function rev_XmlDocToArray theXML
   -- based on code from BVG Docu
   if char 1 to 5 of word 1 of theXML = "<doc>" then
      put "<?xml version=" & quote & "1.0" & quote & "?>" before theXML
   else if char 1 to 5 of word 1 of theXML <> "<?xml" then
      return "I couldn't understand the file you referenced:" & return & thePath
   end if
   --If you wonder what the hell I did right after this comment, then try this: put the cDictDTD of stack "revDocs"
   --note: as of 3.5 that stack does not exist in the ide, instead it's "revDocumentationLibrary"
   put the DTD of card 1 of this stack after char offset(">",theXML) of theXML
   
   put revcreatexmltree(theXML,true,true,false) into theID
   replace "><" with ">" & return & "<" in theXML
   set the XMLtext of this stack to theXML
   if theID is not a number then
      return "revXML made a booboo:" & return & theID
   end if
   if revXMLRootNode(theID) is not "doc" then
      return "This is XML, but not the kind I Expected:" & revXMLRootNode(theID)
   end if
   
   put rev_DocCleanup(revxmltext(theID, "doc/name"),false, "name") into content["name"]
   if content["name"] contains "&gt;" or content["name"] contains "&lt;" then --xml doesn't like < and >
      replace "&gt;" with ">" in content["name"]
      replace "&lt;" with "<" in content["name"]
   else if content["name"] contains "&amp;" then
      replace "&amp;" with "&" in content["name"]
   end if
   put rev_DocCleanup(revxmltext(theID, "doc/type"),false, "type") into content["type"]
   --put "<p>" & rev_DocCleanup(revxmltext(theID, "doc/syntax"),false, "syntax") & "</p>" into content["syntax"]
   put rev_DocCleanup(revxmltext(theID, "doc/syntax"),false, "syntax") into content["syntax"]
   replace "</p><p>" with return in content["syntax"]
   replace "<p>" with empty in content["syntax"]
   replace "</p>" with empty in content["syntax"]
   put word 1 to -1 of content["syntax"] into content["syntax"]
   replace return with "</p><p>" in content["syntax"]
   if char 1 to 3 of content["syntax"] <> "<p>" and content["syntax"] <> "" then
      put "<p>" & content["syntax"] & "</p>" into content["syntax"]
   end if
   put rev_DocCleanup(revxmlchildcontents(theID, "doc/synonyms",comma,return, false, 1),true) into content["synonyms"]
   put rev_DocCleanup(revxmlchildcontents(theID, "doc/objects",comma,return, false, 1),true) into content["objects"]
   put rev_DocCleanup(revxmlchildcontents(theID, "doc/categories",comma,return, false, 1)) into temp
   repeat for each line theLine in temp
      put item 2 to -1 theLine & return after content["categories"]
   end repeat
   delete char -1 of content["categories"]
   set the itemdelimiter to "/"
   put 0 into x
   repeat for revXMLnumberofChildren(theID, "doc/related",,1) times
      add one to x
      if item 1 of revXMLattribute(theID, "doc/related/docRef[" & x & "]","src") = "Dictionary" then
         put revXMLnodecontents(theID, "doc/related/docRef[" & x & "]") after content["related"]
         if word -2 to -1 of line -1 of content["related"] = "control structure" then
            put word 1 to -3 of line -1 of content["related"] & tab & word -2 to -1 of line -1 of content["related"] & return into line -1 of content["related"]
         else
            put word 1 to -2 of line -1 of content["related"] & tab & word -1 of line -1 of content["related"] & return into line -1 of content["related"]
         end if
      end if
   end repeat
   delete char -1 of content["related"]
   set the itemdelimiter to comma
   put rev_DocCleanup(revXMLattribute(theID, "doc/introduced","version")) into content["introduced"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/changed","version")) into content["changed"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/removed","version")) into content["removed"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/osx","support")) into content["osx"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/macos","support")) into content["macos"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/win32","support")) into content["win32"]
   put rev_DocCleanup(revXMLattribute(theID, "doc/unix","support")) into content["unix"]
   put rev_DocCleanup(revxmltext(theID, "doc/summary"),false, "summary") into content["summary"]
   put rev_DocCleanup(revxmltext(theID, "doc/example"),false, "example") into content["example"]
   put rev_DocCleanup(revxmltext(theID, "doc/description"),false, "description") into content["description"]
   
   revdeleteXMLtree theID
   return content
end rev_XmlDocToArray


--> Rev | Dictionary | Styles
-
function rev_DictionaryStyleArray
   put the customproperties ["cStyles"] of revDocumentationStack() into someArray
   return someArray
end rev_DictionaryStyleArray

function rev_FormatXMLFontFace pTag
   -- Given a tag name, returns the font that the contents of this
   -- tag should be displayed in.
   local tFace
   put item 1 of the cStyles[pTag] of revDocumentationStack() into tFace
   if tFace is "default" then return empty
   return tFace
end rev_FormatXMLFontFace

function rev_FormatXMLFontSize pTag
   -- Given a tag name, returns the size that the contents of this 
   -- tag should be displayed in.
   local tSize
   put item 2 of the cStyles[pTag] of revDocumentationStack() into tSize
   if tSize is "default" then return empty
   return tSize
end rev_FormatXMLFontSize

function rev_FormatXMLFontColor pTag
   -- Given a tag name, returns the color that the contents of this tag
   -- should be displayed in.
   local tColor
   put item 3 of the cStyles[pTag] of revDocumentationStack() into tColor
   if tColor is "default" then return empty
   return tColor
end rev_FormatXMLFontColor

-- Given a tag name, returns the style that the contents of this
-- tag should be displayed in.
function rev_FormatXMLFontStyle pTag
  local tStyle
  put item 4 to -1 of the cStyles[pTag] of revDocumentationStack() into tStyle
  if tStyle is default then return empty
  return tStyle
end rev_FormatXMLFontStyle


--> Private
-
private command _parseDictionary scriptDictionaryArray, @dictionaryTerms, @dicArray   
   repeat for each key indexNum in scriptDictionaryArray
      put scriptDictionaryArray [indexNum]["type"] into entryType 
      put scriptDictionaryArray [indexNum]["display name"] into dictionaryTerm
      if entryType is among the items of "message,function,command,property,keyword,object,operator,control structure,constant" then
         put dictionaryTerm & CR after dictionaryTerms
      end if
      put indexNum into dicArray [entryType][dictionaryTerm]
   end repeat
   delete char -1 of dictionaryTerms
   sort dictionaryTerms
end _parseDictionary

private function rev_DocCleanup theStuff needsP tagToRemove
   -- from BVG
   if char 1 to 6 of theStuff  = "xmlerr" then
      return ""
   end if
   if tagToRemove <>  "" then
      replace "<" & tagToRemove & ">" with "" in theStuff
      replace "</" & tagToRemove & ">" with "" in theStuff
      replace "<" & tagToRemove & "/>" with "" in theStuff
   end if
   if theStuff contains "<docRef" then
      set the itemdelimiter to "<"
      set the linedelimiter to ">"
      put "" into temp
      put false into theSkip
      repeat for each line theLine in theStuff
         --add your own glossary handling in the next if statement
         if item -1 of theLine contains "src=" & quote & "glossary/" or item -1 of theLine contains "src=" & quote & "../glossary/" or item -1 of theLine contains "src=" & quote & "reference/" then
            put item 1 to -2 of theLine after temp
            put true into theSkip
         else if item -1 of theLine contains "src=" & quote & "dictionary/" then
            put item 1 to -2 of theLine after temp
            set the itemdelimiter to "/"
            put "<docRef src=" & quote & item -1 of theLine & ">" after temp
            set the itemdelimiter to "<"
         else
            if theSkip and item -1 of theLine = "/docRef" then
               put item 1 to -2 of theLine after temp
               put false into theSkip
            else
               put theLine & ">" after temp
            end if
         end if
      end repeat
      put temp into theStuff
      replace "<docRef src=" with "<a href=" in theStuff
      replace "</docRef>" with "</a>" in theStuff
      set the itemdelimiter to comma
      set the linedelimiter to return
   end if
   if needsP then
      put "" into temp
      repeat for each line theLine in theStuff
         put "<p>" & item 2 of theLine & "</p>" & return after temp
      end repeat
      put char 1 to -2 of temp into theStuff
   end if
   replace "<p/>" with "<p></p>" in theStuff
   return theStuff
end rev_DocCleanup
