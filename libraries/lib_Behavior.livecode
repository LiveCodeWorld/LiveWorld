script "lib_Behavior"
--> MetaData
-
license: GPLv3
name: lib_Behavior
type: library
version: 0.4

/*
A library for script behaviors.
*/

--> Working on
-

--> Card | Behavior
-
command card_CreateBehavior bStackName
   put "lcw_Display" into projectName
   --
   put the project_Folder of stack projectName into projectFolder
   if bStackName is empty then
      ask_CreateProjectBehavior projectName
      put the result into bStackPath
      --
      display_Project projectName
      return bStackPath
   end if
   
   put project_ConstructStackPath (bStackName, projectFolder, "behaviors", "livecodescript") into newStackPath
   if exists (stack newStackPath) then
      ask_CreateProjectBehavior projectName
      put the result into bStackPath
   else
      project_CreateBehavior bName, projectName
      put the result into bStackPath
   end if
   --
   display_Project projectName
   return bStackPath
end card_CreateBehavior

function card_ListBehaviorNames
   put project_ListStackNames ("behaviors", "lcw_Display") into sNames
   filter sNames with "behavior_Card*"
   return sNames
end card_ListBehaviorNames


--> Props
-
getprop card_BehaviorName
   put the card_Object of the target into cObject
   if exists (cObject) is false then return empty
   put the behavior of cObject into bObject
   if exists (bObject) is false then return empty
   
   put the short name of bObject into sName
   if char 1 to 13 of sName is "behavior_Card" then
      delete char 1 to 13 of sName
      return sName
   else
      return empty
   end if
end card_BehaviorName

setprop card_BehaviorName sName
   put "behavior_Card" & sName into stackName
   if exists (stack stackName) is false then
      put "behavior_CardMargin" into stackName
      if exists (stack stackName) is false then
         return empty
      end if
   end if
   put the long id of stack stackName into bObject
   --
   put the card_Object of the target into cObject
   if exists (cObject) is false then return empty
   --
   set the behavior of cObject to bObject
   return bObject
end card_BehaviorName



--> Behavior
-
setprop behavior_ClearNames stackNames
   if stackNames is empty then return empty
   replace comma with CR in stackNames
   put the long id of the target into tObject
   --
   repeat for each line stackName in stackNames
      if exists (stack stackName) is false then next repeat
      --
      put the name of stack stackName into sObject
      set the behavior of sObject to empty
   end repeat
end behavior_ClearNames

getprop behavior_StackNames
   put the long id of the target into tObject
   repeat
      put the behavior of tObject into bObject
      switch
         case word 1 of bObject is not "stack"
         case exists (bObject) is false
            delete char -1 of bStackNames
            return bStackNames
         default
            put the stack_Name of bObject into bStackName
            put bStackName & CR after bStackNames
            put bObject into tObject
      end switch
   end repeat
end behavior_StackNames

setprop behavior_StackNames stackNames
   if stackNames is empty then return empty
   replace comma with CR in stackNames
   put the long id of the target into tObject
   
   # Clear any behaviors (or we might cause a loop)
   put behavior_GetHierarchy (tObject) into oObjects
   behavior_Clear oObjects
   
   repeat for each line stackName in stackNames
      if exists (stack stackName) is false then next repeat
      put the long id of stack stackName into bObject
      if tObject = bObject then
         next repeat
      end if
      
      set the behavior of tObject to bObject
      put bObject into tObject
      put bObject & CR after bObjects
   end repeat
   delete char -1 of bObjects
   return bObjects
end behavior_StackNames

setprop behavior_StackNames bStackNames
   -- test and refactor
   put the long id of the target into tObject
   --
   replace comma with CR in bStackNames
   repeat for each line stackName in bStackNames
      if exists (stack stackName) is false then exit repeat
      put the stack_Object of stack stackName & CR after bObjects
   end repeat
   delete char -1 of bObjects
   --
   behavior_SetHierarchy tObject,  bObjects
   return the result
end behavior_StackNames

setprop behavior_AddStack stackName
   if exists (stack stackName) is false then
      return merge ("Error, stack '[[stackName]]' does nto exists.")
   end if
   --
   put the long id of the target into targetObject
   put behavior_GetHierarchy (targetObject) into bObjects
   --
   put the name of stack stackName into stackObject
   line_Add stackObject, bObjects
   --
   behavior_SetHierarchy targetObject,  bObjects
   return the result
end behavior_AddStack


--> Behavior | StackName
-
getprop behavior_StackName
   put the behavior of the target into bObject
   switch
      case word 1 of bObject is not "stack"
      case exists (bObject) is false
         return empty
      default
         put the stack_Name of bObject into behaviorStackName
         return behaviorStackName
   end switch
end behavior_StackName

setprop behavior_StackName stackName
   if exists (stack stackName) is false then return empty
   put the name of stack stackName into stackObject
   set the behavior of the target to stackObject
   return stackObject
end behavior_StackName


--> Behavior
-
getprop behavior_HandlerExists [hkeyLine]
   put the behavior of the target into bObject
   if exists (bObject) is false then return empty
   --
   put the revAvailablehandlers of bObject into hTable
   htable_ExactLineOffsets hkeyLine, hTable, startLineNum, endLineNum
   return the result
end behavior_HandlerExists

getprop behavior_Handler [hkeyLine]
   put the behavior of the target into bObject
   if exists (bObject) is false then return empty
   --
   put the revAvailablehandlers of bObject into hTable
   htable_ExactLineOffsets hkeyLine, hTable, startLineNum, endLineNum
   put line startLineNum to endLineNum of the script of bObject into behaviorHandler
   return behaviorHandler
end behavior_Handler


--> Behavior | Hierarchy
-
getprop behavior_Objects
   put the long id of the target into targetObject
   put behavior_GetHierarchy (targetObject) into bObjects
   return bObjects
end behavior_Objects

setprop behavior_Objects bObjects
   put the long id of the target into targetObject
   behavior_SetHierarchy targetObject,  bObjects
   return the result
end behavior_Objects

getprop behavior_LastObject
   return the last line of the behavior_Objects of the target
end behavior_LastObject


--> Behaviors
-
command behavior_Clear bObjects
   repeat for each line bObject in bObjects
      if exists (bObject) is false then
         return bObject
      end if
      set the behavior of bObject to empty
   end repeat
   return empty
end behavior_Clear

function behavior_GetHierarchy targetObject
   repeat
      put the behavior of targetObject into bObject
      if exists(bObject) is false then exit repeat
      put bObject & CR after bObjects
      put bObject into targetObject
   end repeat
   delete char -1 of bObjects
   return bObjects
end behavior_GetHierarchy

command behavior_SetHierarchy targetObject,  bObjects
   if bObjects is empty then
      -- instead let's clear the existing behavior hierarchy
      put behavior_GetHierarchy (targetObject) into bObjects
      behavior_Clear bObjects
      return empty
   end if
   
   -- first we need to clear any behaviors (or we might casue a behavior loop)
   behavior_Clear bObjects
   
   repeat for each line bObject in bObjects
      set the behavior of targetObject to bObject
      put bObject into targetObject
   end repeat
   return bObjects
end behavior_SetHierarchy
