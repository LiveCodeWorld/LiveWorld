script "lib_Spotlight"
--> MetaData
-
license: GPLv3
name: lib_Spotlight
type: script library
version: 0.1

/*
This stack contains the wrappers for OSX file metadata system - Spotlight.

See also and write for Livecode - https://github.com/mattheworiordan/Mac-OS-X-Useful-Scripts/blob/master/spotfind.sh
and this:
-  find $HOME -type d -name ".git"
which is painfully slow.
*/

--> Working On
-
-- function spotlight_ChangedPluginFiles pSeconds
   set the cursor to watch
   put library_PluginFolder ("opn_Text/rev/object/", true) into someFolder
   shell_BashParamEscape someFolder
   
   if pSeconds is empty then put 600000 into pSeconds
   -- "mdfind -onlyin /Users/berkowit/1140216408 'kMDItemFSCreationDate >= $time.now(-3600)'"
   -- put merge ("mdfind -onlyin [[someFolder]] 'kMDItemFSContentChangeDate >= $time.now(-[[pSeconds]])'") into someShell
   put merge ("mdfind -onlyin [[someFolder]] 'kMDItemFSContentChangeDate >= $time.now(-[[pSeconds]])'") into someShell
   put shell (someShell) into shellResult
   return shellResult
end spotlight_ChangedPluginFiles

function spotlight_ListRecentlyExportedObjectScripts pSeconds
   if pSeconds is empty then put 20 * 60 into pSeconds
   put spotlight_ListRecentlyExportedScriptFiles (pSeconds) into scriptFiles
   put script_FileToObject (scriptFiles) into recentObjectExports -- not working
   return recentObjectExports
end spotlight_ListRecentlyExportedObjectScripts

function script_FileToObject someFiles
   -- this is ntot working
   repeat for each line someFile in someFiles
      set the cursor to busy
      set the itemdelimiter to "/"
      put item -2 of someFile into objectFolder
      put item -4 of someFile into stackName
      if item -5 of someFile = "object" then
         put stackName into mainstackName
      else -- substacks
         -- /opn_Text/rev/object/Library Manager/objects/substacks/Library Manager|OPN Stack Menus/objects/card_1007/script.txt
         put stackName into subStackName
         put item -7 of someFile into mainstackName
      end if
      
      set the itemdelimiter to "_"
      put item 1 of objectFolder into objectType
      switch objectType
         case "stack"
            if subStackName is empty then
               put "stack" && kwote (mainstackName) into someObject
            else
               put "stack" && kwote (subStackName) && "of stack" && kwote (mainstackName) into someObject
            end if
            break
         default
            put item 2 of objectFolder into shortID
            put objectType && "id" && shortID into someObject
            if subStackName is not empty then put space & "of" && "stack" && kwote (subStackName) after someObject
            put space & "of" && "stack" && kwote (mainstackName) after someObject
      end switch
      put someObject & CR after someObjects
   end repeat
   delete char -1 of someObjects
   return someObjects
end script_FileToObject


--> Spotlight
-
function spotlight_FindExecutable pShortFileName
   -- mdfind 'kMDItemFSName = fossil kMDItemKind = "Unix Executable File"'
   put "mdfind '" into someShell
   if pShortFileName is not empty then
       -- bug:  only in home directory (permissions?). Use "spotlight_FindExecutable()" and then filter executable paths.
      put "kMDItemFSName" && "==" && kwote (pShortFileName) & space after someShell
   end if
   put "kMDItemKind" && "==" && kwote("Unix Executable File") & space after someShell 
   delete char -1 of someShell
   put "'" after someShell
   
   put shell (someShell) into shellResult
   return shellResult
end spotlight_FindExecutable

function spotlight_FindApplications appBit, inFolder  
   put "mdfind" && kwote("(kMDItemKind = 'Application')") into someShell
   
   if inFolder is not empty then
      shell_BashParamEscape inFolder
      put space & "-onlyin" && inFolder after someShell
   end if
   
   if fileBit is not empty then
      text_StripSurroundingQuotes fileBit
      put kwote (fileBit) into fileBit
      put space & "&&" && fileBit after someShell
   end if
   
   put shell (someShell) into shellResult
   return shellResult
end spotlight_FindApplications

function spotlight_FindInStack someText, inFolder
   /*
   http://blog.clawpaws.net/post/2007/02/11/Making-OS-X-Fat-Binaries-with-Traditional-Tools
   http://developer.apple.com/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html
   */
   
   put "(kMDItemKind = 'Revolution Stack')" into queryExpression
   
   if someText is not empty then
      replace (quote & "'") with empty in someText
      get merge("('[[someText]]')")
      put space & "&&" && it after queryExpression
   end if
   
   put "mdfind" && kwote(queryExpression) into someShell
   put someShell
   
   if inFolder is not empty then
      shell_BashParamEscape inFolder
      put space & "-onlyin" && inFolder after someShell
   end if
   return shell(someShell)
end spotlight_FindInStack

function spotlight_FindStack fileBit, inFolder
   /*
   http://blog.clawpaws.net/post/2007/02/11/Making-OS-X-Fat-Binaries-with-Traditional-Tools
   http://developer.apple.com/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html
   */
   
   put "(kMDItemKind = 'Revolution Stack')" into queryExpression
   
   if fileBit is not empty then
      replace (quote & "'") with empty in fileBit
      get merge("(kMDItemDisplayName = '[[fileBit]]')")
      put space & "&&" && it after queryExpression
   end if
   
   put "mdfind" && kwote(queryExpression) into someShell
   -- put someShell
   
   if inFolder is not empty then
      shell_BashParamEscape inFolder
      put space & "-onlyin" && inFolder after someShell
   end if
   return shell(someShell)
end spotlight_FindStack

function spotlight_ListStacks pInsideFolder
   put "(kMDItemKind = 'LiveCode Stack')" into queryExpression
   put "mdfind" && kwote(queryExpression) into someShell
   
   if pInsideFolder is not empty then
      shell_BashParamEscape pInsideFolder
      put space & "-onlyin" && pInsideFolder after someShell
   end if
   
   put shell (someShell) into shellResult
   return shellResult
end spotlight_ListStacks

function spotlight_Find someText, inFolder
   /*
   Usage: mdfind [-live] [-onlyin directory] query
   query can be an expression or a sequence of words
   
   -live             Query should stay active
   -onlyin <dir>     Search only within given directory
   
   mdfind "kMDItemAuthors == 'John Scofield' && kMDItemContentTypeTree == 'public.audio'"
   mdfind "kind:pdf Calculus"
   */
   
   text_StripSurroundingQuotes someText
   put kwote(someText) into someText
   
   put "mdfind" && someText into someShell
   
   if inFolder is not empty then
      shell_BashParamEscape inFolder
      put space & "-onlyin" && inFolder after someShell
   end if
   return shell(someShell)
end spotlight_Find

function spotlight_ListExportedScriptFiles
   put library_PluginFolder ("opn_Text/rev/object/", true) into someFolder
   shell_BashParamEscape someFolder
   put merge ("mdfind -name script.txt -onlyin [[someFolder]]") into someShell
   put shell (someShell) into shellResult
   return shellResult
end spotlight_ListExportedScriptFiles

function spotlight_ListRecentlyExportedScriptFiles pSeconds
   set the cursor to watch
   /*
   -- stuff that didn't work
   -- put library_PluginFolder ("opn_Text/rev/object/", true) into someFolder
   -- shell_BashParamEscape someFolder
   -- put merge ("mdfind -onlyin [[someFolder]] 'kMDItemFSCreationDate >= $time.now(-[[someSeconds]])'") into someShell
   -- put merge ("mdfind -name script.txt -onlyin [[someFolder]] 'kMDItemFSCreationDate >= $time.now(-[[someSeconds]])'") into someShell
   -- 'kMDItemFSName == script.txt' && 
   */
   
   if pSeconds is empty then put 600 into pSeconds
   put merge ("mdfind 'kMDItemFSContentChangeDate >= $time.now(-[[pSeconds]]) && kMDItemFSName == script.txt'") into someShell
   put shell (someShell) into shellResult
   return shellResult
end spotlight_ListRecentlyExportedScriptFiles

-- function spotlight_GetRecentQuery pWhich
   switch pWhich
      default -- case "this week"
         return "'(kMDItemFSContentChangeDate == $time.this_week(-1))'" into thisWeekQuery
   end switch
   -- mdfind '(kMDItemFSContentChangeDate >= $time.today(-1)) && (kMDItemFSContentChangeDate < $time.now) && (kMDItemContentTypeTree = "public.content")'
   -- put "'(kMDItemFSContentChangeDate >= $time.today(-1)) && (kMDItemFSContentChangeDate < $time.now)'" into todayQuery
   -- put space & "&& (kMDItemContentTypeTree = "public.content")" after todayQuery
   return todayQuery
end spotlight_GetRecentQuery

function spotlight_FindFile fileBit, pFolder
   put "mdfind" into someShell
   
   if pFolder is not empty then
      shell_BashParamEscape pFolder
      put space & "-onlyin" && pFolder after someShell
   end if
   
   if fileBit is not empty then
      shell_BashParamEscape fileBit
      put space & "-name" && fileBit after someShell
   end if
   
   put shell (someShell) into shellResult
   return shellResult
end spotlight_FindFile

getprop spotlight_DateRanges
    -- mdfind "kind:pdf date:this week"
    -- The date ranges that can be specified are:
    
    return "this month,this week,this year,-,today,yesterday,tomorrow,-,next month,next week,next year"
end spotlight_DateRanges

function spotlight_TranslateDateRange niceRange
    return "date:" & niceRange
end spotlight_TranslateDateRange

function spotlight_GetFileComment someFile
    applescript_ConvertPath someFile  
    put merge("comment of the file [[someFile]]") into appleScriptLine
    return appleScript_DoLine(appleScriptLine, "Finder" , false)
end spotlight_GetFileComment

on spotlight_SetFileComment someFile, commentText
    --set Spotlight comment
    applescript_ConvertPath someFile  
     
    replace quote with "'" in commentText
    put kwote(commentText) into commentText
    
    put merge("set the comment of the file [[someFile]] to [[commentText]] as string") into appleScriptLine
    get appleScript_DoLine(appleScriptLine, "Finder" , true)
    return it
end spotlight_SetFileComment

on spotlight_Import
    -- mdimport -d 4 somefile
end spotlight_Import

function spotlight_GetFileKind someFile
   get spotlight_GetAttribute (someFile, "kMDItemKind")
   replace quote with empty in it
   return word 1 to -1 of it
end spotlight_GetFileKind

function spotlight_Kind someFile
   put spotlight_GetAttribute(someFile, "kMDItemKind") into someKind
   put word 1 to - 1 of someKind into someKind
   delete char 1 of someKind
   delete char -1 of someKind
   return someKind
end spotlight_Kind

getprop spotlight_Kinds
    return spotlight_ListFileKinds()
end spotlight_Kinds

function spotlight_ListFileKinds
    return "Applications,Folders,-,Images,Movies,Music,Audio,-,PDF,Bookmarks,-,Contacts,Email,iCal Events,iCal To Dos,-,Preferences,Fonts,Presentations"
end spotlight_ListFileKinds

function spotlight_TranslateKind niceKind
    switch niceKind
        case "Applications"
            return  "kind:application"
        case "Contacts"
            return "kind:contact"
        case "folders"
            return "kind:folder"
        case "Email"
            return "kind:email"
        case "iCal Events"
            return  "kind:event"
        case "iCal To Dos"
            return "kind:todo"
        case "Images"
            return  "kind:image"
        case "movies"
            return "kind:movie"
        case "Music"
            return "kind:music"
        case "Audio"
            return "kind:audio"
        case "PDF"
            return "kind:pdf"
        case "Preferences"
            return "kind:preferences"
        case "Bookmarks"
            return "kind:bookmark"
        case "Fonts"
            return "kind:font"
        case "Presentations"
            return "kind:presentations"
    end switch
end spotlight_TranslateKind

function spotlight_kMDItemID someFile
    return spotlight_GetAttribute(someFile, "ID")
end spotlight_kMDItemID

-- command spotlight_ExtractFixedDetails someFile, @kMDItemID
    put spotlight_GetFileInfo (someFile) into spotlightFileInfo
    put spotlight_ExtractAttribute(spotlightFileInfo, "ID") into kMDItemID
end spotlight_ExtractFixedDetails

on spotlight_DisplayDates someFile
    -- does not change when copied
    get "ItemAttributeChangeDate"
    repeat for each item someItem in it
        put someItem & ":" && spotlight_GetAttribute(someFile, someItem)
    end repeat
     
    -- all change when copied!
    get "FSCreationDate,FSContentChangeDate,ContentModificationDate,ContentModificationDate"
    repeat for each item someItem in it
        put someItem & ":" && spotlight_GetAttribute(someFile, someItem)
    end repeat
end spotlight_DisplayDates

function spotlight_MetaMovieHash movieFile
    get spotlight_ExtractFixedMovieInfo(movieFile)
    put it
    return text_Hash(it)
end spotlight_MetaMovieHash

function spotlight_ExtractFixedMovieInfo movieFile
    get "DurationSeconds,FSSize,TotalBitRate,Kind,Codecs"
    repeat for each item someItem in it
        put someItem & ":" && spotlight_GetAttribute(movieFile, someItem) & CR after fixedMovieInfo
    end repeat
    delete char -1 of fixedMovieInfo
    return fixedMovieInfo
end spotlight_ExtractFixedMovieInfo

function spotlight_GetFileSize someFile
   return spotlight_GetAttribute (someFile, "kMDItemFSSize")
end spotlight_GetFileSize

function spotlight_GetPixelWidth someFile
   return spotlight_GetAttribute (someFile, "kMDItemPixelWidth")
end spotlight_GetPixelWidth

function spotlight_GetPixelHeight someFile
   return spotlight_GetAttribute (someFile, "kMDItemPixelHeight")
end spotlight_GetPixelHeight

function spotlight_GetAttribute someFile, attributeName
   put spotlight_GetFileInfo(someFile) into spotlightFileInfo
   return spotlight_ExtractAttribute (spotlightFileInfo, attributeName) 
end spotlight_GetAttribute 

function spotlight_GetFileInfo someFile
   put "mdls" into someShell
   if someFile is not empty then
      shell_BashParamEscape someFile
      -- put kwote(someFile) into someFile
      put space & someFile after someShell
   end if
   get shell(someShell)
   -- delete line 1 of it
   return line 2 to -1 of it
end spotlight_GetFileInfo

function spotlight_ExtractAttribute spotlightFileInfo, attributeName
    if char 1 to 7 of attributeName is not "kMDItem" then put "kMDItem" before attributeName
    put "(?im)" &  attributeName & " += +(.*)" into someReg
    if matchtext (spotlightFileInfo, someReg, someValue) is true then
        return someValue
    else
        return empty
    end if
end spotlight_ExtractAttribute

getprop spotlight_Attributes
    return "AttributeChangeDate,FSContentChangeDate,FSCreationDate,FSCreatorCode,FSFinderFlags,FSInvisible,FSIsExtensionHidden,FSLabel,FSName,FSNodeCount,FSOwnerGroupID,FSOwnerUserID,FSSize,FSTypeCode,ID,LastUsedDate,UsedDates"
end spotlight_Attributes

function spotlight_FileDuplicates
    -- from http://www.macosxhints.com/article.php?story=20061003163429425
    /*
    #!/bin/sh
    #
    # dupecheck - identified potential duplicates of a file using Spotlight metadata
    # by Derick Fay, October 2006
    
    # if [ -n $1 ]; then 	# -n tests to see if the argument is non empty
    echo "usage: dupecheck filename"
    exit
    fi
     
    #extract metadata from the file to be checked
    size=`mdls "$1" | grep kMDItemFSSize`
    name=`mdls "$1" | grep kMDItemFSName`
    kind=`mdls "$1" | grep kMDItemKind`
     
    #trim the strings
    size1=${size:33}
    name1=${name:33}
    kind1=${kind:33}
     
    #run the searches
    echo "Possible matches based on filename:"
    mdfind "kMDItemFSName == $name1"
    echo
    echo "Possible matches based on size and kind:"
    mdfind "kMDItemFSSize == $size1 && kMDItemKind=$kind1"
     
    */
     
     
end spotlight_FileDuplicates
