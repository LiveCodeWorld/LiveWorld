script "lib_StackFiles"
--> MetaData
-
license: GPLv3
name: lib_StackFiles
type: script library
version: 0.8

/*
This is a library to manipulate and store stackfiles automatically.

It is an old but working library that should be updated to work with arrays better.
*/


--> StackFile | Props
-
setprop stackFile_ExtraPaths someFiles
   put the stack_Object of the target into toStackObject
   stackFile_AddStackPaths someFiles, toStackObject   
   put the result into stackFileTable
   return stackFileTable
end stackFile_ExtraPaths

setprop stackFile_AddFolder [askAdd] someFolder
   put the stack_Object of the target into stackObject
   put folder_SearchForStacks (someFolder) into bigFileIndex
   stackFile_AddStackPaths bigFileIndex, stackObject, askAdd
   put the result into stackFileTable
   return stackFileTable
end stackFile_AddFolder

getprop stackfile_Paths
   put the stack_Object of the target into libraryStackFileStack
   put the filename of libraryStackFileStack into stackFileRoot
   put the stackfiles of libraryStackFileStack into stackFileTable
   put stackFile_ConstructFileIndex (stackFileTable, stackFileRoot) into stackPaths
   return stackPaths
end stackfile_Paths

setprop stackfile_Paths [pAskAdd] stackPaths
   put the stack_Object of the target into stackObject
   put stackFile_TableFromPaths (stackPaths, stackObject) into stackFileTable
   set the stackfiles of stackObject to stackFileTable
   return stackFileTable
end stackfile_Paths

getprop stackfile_FileArray
   -- returns an array with long not relative file names
   
   local fileNameArray
   put the stack_Object of the target into stackObject
   put the stackfiles of stackObject into stackFileTable
   put the filename of stackObject into someFile
   put folder_Above(someFile) into baseFolder
   
   repeat for each line someLine in stackFileTable
      put item 1 of someLine into stackName
      put item 2 to -1 of someLine into relativeFile
      put file_FromRelativePath(relativeFile, baseFolder) into someFile
      put someFile into fileNameArray [stackName]
   end repeat
   return fileNameArray
end stackfile_FileArray

getprop stackfile_Path [stackName]
   put the stack_Object of the target into stackObject
   put the stackfiles of stackObject into stackFileTable
   
   put the effective filename of stackObject into stackFileRoot
   set the itemdelimiter to slash
   delete item -1 of stackFileRoot -- no trailing slash
   
   put stackFile_ToArray (stackFileTable) into stackFileArray
   put stackfileArray [stackName] into relPath
   if relPath begins with stackFileRoot then return relPath
   
   put stackFileRoot & relPath into stackfilePath
   if exists (stack stackfilePath) then
      return stackfilePath
   else
      return empty
   end if
end stackfile_Path

getprop stackfile_RelativePath [stackName]
   put the stackfile_Array of the target into stackfileArray
   put stackfileArray [stackName] into relativePath
   return relativePath
end stackfile_RelativePath

getprop stackfile_Array
   put the stack_Object of the target into someStack
   put the stackfiles of someStack into stackFileTable
   put stackFile_ToArray (stackFileTable) into stackFileArray
   return stackFileArray
end stackfile_Array

setprop stackfile_Array stackFileArray
   put the stack_Object of the target into someStack
   put stackFile_FromArray (stackFileArray) into stackFileTable
   sort stackFileTable by item 1 of each
   set the stackfiles of someStack to stackFileTable
   return stackFileTable
end stackfile_Array

getprop stackFile_ErrorArray
   put the stack_Object of the target into stackFileStack
   
   put the stackfile_Array of stackFileStack into stackFileArray  
   put the filename of stackFileStack into someRoot
   set the itemdelimiter to "/"
   
   lock messages
   put the mainstacks into oMainStacks
   set the wholematches to true
   repeat for each key stackName in stackFileArray
      put stackFileArray [stackName] into relativeFile
      put someRoot into someFile
      put relativeFile into item -1 of someFile
      
      if there is not a stack someFile then
         -- if there is not a file someFile then -- not sure if non-stacks can be in the stackfiles ?
         delete local stackFileArray [stackName]
         put empty into badArray [stackName][someFile]
      else
         put the mainstack of stack someFile into mainStackName
         if mainStackName is not among the lines of oMainStacks then
            delete stack mainStackName
         end if
      end if
   end repeat
   unlock messages
   
   put stackFileArray into resultArray ["fixedStackFileArray"]
   put badArray into resultArray ["badArray"]
   return resultArray
end stackFile_ErrorArray


--> Stackfiles | Known
-
getprop known_Stackfiles
   put the known_StackfileArray of the target into projectStackFileArray
   put stackFile_FromArray (projectStackFileArray) into projectStackFiles
   return projectStackFiles
end known_Stackfiles

getprop known_StackfileArray
   put the project_HomeStack of the target into projectHomeStack
   project_GuessHomeStack projectHomeStack
   put the filename of projectHomeStack into projectHomeFileName
   put known_ListRelativeStackFiles (projectHomeFileName) into projectStackFileArray
   return projectStackFileArray
end known_StackfileArray

command know_Me pImportantPaths   
   put the project_HomeStack of the target into projectHomeStack
   project_GuessHomeStack projectHomeStack
   put project_ListStandardFiles (pImportantPaths) into stackPaths
   set the stackfile_Paths of projectHomeStack to stackPaths
   put the result into stackFileTable
   return stackFileTable
end know_Me

command know_Everything
   put known_GetStackFileArray() into stackFileArray
   set the stackfile_Array of this stack to stackFileArray
   set the stackfile_Array of stack "Library Manager" to stackFileArray
   start using this stack
end know_Everything

function known_ListRelativeStackFiles projectHomeFileName
   set the cursor to watch
   local stackFileArray
   put spotlight_ListAllStacks() into longStackPaths
   put folder_Above (projectHomeFileName) into baseFolder
   stackFile_AddToArray stackFileArray, longStackPaths, baseFolder
   return stackFileArray
end known_ListRelativeStackFiles

function known_GetStackFileArray pHomeStackName
   local stackFileArray
   if pHomeStackName is empty then put the short name of this stack into pHomeStackName
   
   set the cursor to watch
   put spotlight_ListAllStacks() into longStackPaths
   put the filename of stack pHomeStackName into rootFile
   put folder_Above (rootFile) into baseFolder
   stackFile_AddToArray stackFileArray, longStackPaths, baseFolder
   return stackFileArray
end known_GetStackFileArray


--> Library | Stackfiles
-
command library_FixStackFiles
   put library_StackFileStack() into stackFileStack
   stackFile_FixStackFiles stackFileStack
   put the result into resultArray
   return resultArray
end library_FixStackFiles

function library_ListKnownFiles
   -- was "opn_GetFileIndex"
   put library_StackFileStack() into libraryStackFileStack
   put the filename of libraryStackFileStack into stackFileRoot
   put the stackfiles of libraryStackFileStack into stackFileTable
   put stackFile_ConstructFileIndex (stackFileTable, stackFileRoot) into someFiles
   return someFiles
end library_ListKnownFiles

function library_ListKnownStackNames
   -- was "opn_GetStackNameIndex"
   put library_GetStackFiles() into knownStackFiles
   set the columndelimiter to comma
   split knownStackFiles by column
   put knownStackFiles [1] into knownStackNames
   sort knownStackNames
   return word 1 to -1 of knownStackNames
end library_ListKnownStackNames

function library_ListKnownAndCreateOutline @subStackOutline
   put library_ListKnownFiles() into fileIndex
   repeat for each line stackFile in fileIndex
      if there is a stack stackFile then
         put the name of stack stackFile into someStack
         put html_ConstructNameLink (someStack, stackFile) & CR after subStackOutline
         put the long id of stack stackFile & CR after stackIndex
         
         put the substacks of stack stackFile into subStackIndex
         if subStack_Index is not empty then
            repeat for each line subStackName in subStackIndex
               put the name of stack subStackName into someSubStack
               put tab & html_ConstructNameLink (someSubStack, stackFile) & CR after subStackOutline
               put the long id of stack subStackName of stack stackFile & CR after stackIndex
            end repeat
         end if
      end if
   end repeat
   delete last char of subStackOutline  
   return stackIndex
end library_ListKnownAndCreateOutline

command library_RemoveStackFromKnown stackObject
   -- was "opn_RemoveStack"
   put library_StackFileStack() into stackFileStack
   
   put the short name of stackObject into stackName
   put the stackfile_Array of stackFileStack into stackFileArray  
   delete local stackFileArray [stackName]
   set the stackfile_Array of stackFileStack to stackFileArray  
   lock messages
   save stackFileStack
   unlock messages
   return newStackFiles
end library_RemoveStackFromKnown

command library_AddStackToKnown someStack
   -- was "opn_AddStack"
   put the short name of someStack into newStackName
   put the effective filename of stack newStackName into newFile
   if there is a file newFile then
      library_AddToStackFiles newStackName, newFile
      library_StoreWorkingStackFiles -- stackfiles are loaded dynamically from a file, so make you sure you store them!
      return the result
   else
      return empty
   end if
end library_AddStackToKnown

command library_AddToStackFiles newStackName, newFile
   -- was "opn_AddToStackFiles"
   put library_StackFileStack() into stackFileStack
   put the stackfile_Array of stackFileStack into stackFileArray  
   --
   put the filename of stackFileStack into rootFile
   put folder_Above (rootFile) into baseFolder
   put file_GetRelativePath (newFile, baseFolder, commonPath) into newRelativeFile
   put newRelativeFile into stackFileArray [newStackName]
   --
   set the stackfile_Array of stackFileStack to stackFileArray  
   lock messages
   save stack rootFile
   unlock messages
   return newRelativeFile
end library_AddToStackFiles

command library_AddFolderToStackFiles someFolder, pAskAdd
   -- was "opn_AddFolderToStackFiles"
   if the platform = "MacOS" then
      try -- should test for spotlight
         put spotlight_ListStacks (someFolder) into bigFileIndex
      catch e
         put folder_SearchForStacks (someFolder) into bigFileIndex
      end try
   else
      put folder_SearchForStacks (someFolder) into bigFileIndex
   end if
   
   library_AddFilesToStackFiles bigFileIndex, pAskAdd
   put the result into resultArray
   return resultArray
end library_AddFolderToStackFiles

command library_AddFilesToStackFiles stackPaths, pAskAdd
   put library_StackFileStack() into libraryStackFileStack
   stackFile_AddStackPaths stackPaths, libraryStackFileStack, pAskAdd
   put the result into stackFileTable
   return stackFileTable
end library_AddFilesToStackFiles


--> Library | StackFile | Model
-
function library_GetStackFile stackName
   -- was "opn_GetStackFile"
   put library_GetStackFileArray() into stackFileArray
   put stackFileArray [stackName] into relativeFile
   return relativeFile
end library_GetStackFile

function library_GetStackFiles
   -- was "opn_GetStackFiles"
   put library_StackFileStack() into stackFileStack
   return the stackfiles of stackFileStack
end library_GetStackFiles

command library_SetStackFiles stackFileTable
   -- was "opn_SetStackFiles"
   put library_StackFileStack() into stackFileStack
   set the stackfiles of stackFileStack to stackFileTable
end library_SetStackFiles

function library_GetStackFileArray
   -- was "opn_GetStackFileArray"
   put library_StackFileStack() into stackFileStack
   return the stackfile_Array of stackFileStack
end library_GetStackFileArray

command library_SetStackFileArray stackFileArray
   put library_StackFileStack() into stackFileStack
   set the stackfile_Array of stackFileStack to stackFileArray
end library_SetStackFileArray


--> Library | Stackfiles
-
command library_StoreWorkingStackFiles pSetName
   put library_GetStackFiles() into stackFileTable
   library_StoreStackFiles stackFileTable, pSetName
end library_StoreWorkingStackFiles

command library_LoadWorkingStackFiles pSetName
   put library_FetchStackFiles (pSetName) into stackFileTable
   library_SetStackFiles stackFileTable
end library_LoadWorkingStackFiles

function library_FetchShortStackFiles pSetName
   put library_FetchStackFiles (pSetName) into stackFileTable
   set the itemdelimiter to "/"
   repeat for each line someLine in stackFileTable
      put item -1 of someLine into shortFile
      put shortFile & CR after shortFiles
   end repeat
   delete char -1 of shortFiles
   sort shortFiles
   return shortFiles
end library_FetchShortStackFiles

function library_FetchStackFiles pSetName
   -- see also "meta_StackArrayFile" for project level stackfile storage
   put library_FetchProjectArray (pSetName) into setArray
   put setArray ["data"]["stackfiles"] into stackFileTable
   return stackFileTable
end library_FetchStackFiles

command library_StoreStackFiles stackFileTable, pSetName
   put library_FetchProjectArray (pSetName) into setArray
   put stackFileTable into setArray ["data"]["stackfiles"]
   library_StoreProjectArray pSetName, setArray
end library_StoreStackFiles


--> StackFile | Fix
-
command stackFile_FixStackFiles stackFileStack
   put the stackFile_ErrorArray of stackFileStack into resultArray
   put resultArray ["fixedStackFileArray"] into stackFileArray
   put resultArray ["badArray"] into badArray
   
   set the stackfile_Array of stackFileStack to stackFileArray
   put the result into stackFileTable
   put stackFileTable into resultArray ["stackFileTable"]
   return resultArray
end stackFile_FixStackFiles


--> StackFile | Array
-
function stackFile_GetRelativeArray stackName
   put the stackfiles of stack stackName into stackFileTable
   put stackFile_ToArray (stackFileTable) into stackNameDictionary
   put array_Reverse (stackNameDictionary) into relativeFileDictionary
   return relativeFileDictionary
end stackFile_GetRelativeArray

function stackFile_ToArray stackFileTable
   split stackFileTable by CR and comma
   return stackFileTable
end stackFile_ToArray

function stackFile_FromArray stackFileArray
   combine stackFileArray using CR and comma
   sort stackFileArray
   return stackFileArray
end stackFile_FromArray

function stackfile_ConvertArray oldStackObject, newStackObject
   put the filename of newStackObject into baseStackFile
   put folder_Above (baseStackFile) into baseFolder
   
   put the stackfile_FileArray of oldStackObject into someArray
   repeat for each key someKey in someArray
      put someArray [ someKey] into someFile
      put file_GetRelativePath (someFile, baseFolder, commonPath) into relativePath
      put relativePath into newArray [ someKey] 
   end repeat
   return newArray
end stackfile_ConvertArray


--> Stackfile | Shorfiles
-
function stackfile_FilterShortFilesForKnown shortFileIndex, pSetName
   local shortStackArray, filteredStackNameArray
   stackFile_DeconstructShortFileIndex shortFileIndex, shortStackArray, filteredStackNameArray, filteredShortStackArray, pSetName
   return keys (filteredShortStackArray)
end stackfile_FilterShortFilesForKnown

function stackfile_FilterStackNamesForKnown shortFileIndex, pSetName
    return stackFile_NamesFromShortFiles (shortFileIndex, pSetName)
end stackfile_FilterStackNamesForKnown

function stackFile_ContainsShortFile shortFile
   put stackFile_NameFromShortFile (shortFile) into stackName
   return stackName is not empty
end stackFile_ContainsShortFile

function stackFile_NameFromShortFile shortFile, pSetName
   put stackFile_ConstructShortFileArray (pSetName) into shortStackArray
   return shortStackArray [shortFile]["stackName"]
end stackFile_NameFromShortFile

function stackFile_NamesFromShortFiles shortFileIndex, pSetName
   local shortStackArray, filteredStackNameArray
   stackFile_DeconstructShortFileIndex shortFileIndex, shortStackArray, filteredStackNameArray, filteredShortStackArray, pSetName
   return keys (filteredStackNameArray)
end stackFile_NamesFromShortFiles

function stackFile_PathFromShortFile shortFile, pSetName
   put stackFile_ConstructShortFileArray (pSetName) into shortStackArray
   return shortStackArray [shortFile]["relativePath"]
end stackFile_PathFromShortFile

function stackFile_PathsFromShortFiles shortFileIndex, pSetName
   local shortStackArray, filteredStackNameArray
   stackFile_DeconstructShortFileIndex shortFileIndex, shortStackArray, filteredStackNameArray, filteredShortStackArray, pSetName
   return keys (filteredStackNameArray)
end stackFile_PathsFromShortFiles

function stackFile_ConstructShortFileArray pSetName
   put library_FetchStackFiles (pSetName) into stackFileTable
   repeat for each line someLine in stackFileTable
      set the itemdelimiter to comma
      put item 1 of someLine into stackName
      put item 2 of someLine into relativePath
      
      set the itemdelimiter to "/"
      put item -1 of someLine into shortFile
      
      put stackName into shortStackArray [shortFile]["stackName"]
      put relativePath into shortStackArray [shortFile]["relativePath"]
   end repeat
   return shortStackArray
end stackFile_ConstructShortFileArray

command stackFile_DeconstructShortFileIndex shortFileIndex, @shortStackArray, @filteredStackNameArray, @filteredShortStackArray, pSetName
   put stackFile_ConstructShortFileArray (pSetName) into shortStackArray
   repeat for each line shortFile in shortFileIndex
      put shortStackArray [shortFile]["stackName"] into stackName
      put shortStackArray [shortFile]["relativePath"] into relativePath
      if stackName is not empty then
         put relativePath into filteredStackNameArray [stackName]
         put relativePath into filteredShortStackArray [shortFile]
      end if
   end repeat
end stackFile_DeconstructShortFileIndex


--> Stackfile
-
function stackFile_TableFromPaths someFiles, homeStackObject
   local stackFileArray
   put the filename of homeStackObject into rootFile
   put folder_Above (rootFile) into baseFolder
   stackFile_AddToArray stackFileArray, someFiles, baseFolder
   put stackFile_FromArray (stackFileArray) into stackFileTable
   sort stackFileTable by item 1 of each
   return stackFileTable
end stackFile_TableFromPaths

command stackFile_AddStackPaths someFiles, toStackObject
   put the stackfile_Array of toStackObject into stackFileArray
   
   put the filename of toStackObject into rootFile
   put folder_Above (rootFile) into baseFolder
   stackFile_AddToArray stackFileArray, someFiles, baseFolder
   put stackFile_FromArray (stackFileArray) into stackFileTable
   
   sort stackFileTable by item 1 of each
   set the stackfiles of toStackObject to stackFileTable
   return stackFileTable
end stackFile_AddStackPaths

command stackFile_AddToArray @stackFileArray, someFiles, baseFolder
   lock messages
   put the mainstacks into oMainStacks
   set the wholematches to true
   repeat for each line newFile in someFiles
      if there is not a stack newFile then next repeat
      
      put the short name of stack newFile into newStackName
      if newStackName contains comma then
         next repeat -- need another way of dealing with this
      end if
      
      put stackFileArray [newStackName] into oldRelativeFile
      if oldRelativeFile is empty then
         put empty into oldFile
      else
         put baseFolder & oldRelativeFile into oldFile
      end if
      
      put file_GetRelativePath (newFile, baseFolder, commonPath) into newRelativeFile
      switch
         case oldRelativeFile = newRelativeFile and there is a stack oldFile
            -- do nothing, but continue and close stack if it is newly loaded
            break
         case oldFile = empty
            -- lets add it
            put newRelativeFile into stackFileArray [newStackName]
            break
         case there is not a stack oldFile
            -- it was there but must have moved / been deleted
            -- lets add it
            put newRelativeFile into stackFileArray [newStackName]
            break
         default
            -- more than one stack with the same name
            -- let's not add it to stackfile, but store info in resultArray
            put empty into resultArray ["duplicateFileArray"][newStackName][newFile]
      end switch 
      
      put the mainstack of stack newStackName into mainStackName
      if mainStackName is not among the lines of oMainStacks then
         -- close stack as it is newly loaded
         delete stack mainStackName
      end if
   end repeat
   unlock messages
   return resultArray
end stackFile_AddToArray

command stackFile_AddStackNames newStackNames, toStackObject
   put stackFile_ToArray (the stackfiles of toStackObject) into stackFileArray
   put the filename of toStackObject into rootFile	# wiil add to memory -- assume it is OK?
   put folder_Above(rootFile) into baseFolder
   lock messages
   put the mainstacks into oMainStacks
   set the wholematches to true
   repeat for each line newStackName in newStackNames
      if there is not a stack newFile then next repeat
      if newStackName contains comma then
         -- need another way of dealing with this
         next repeat
      end if
      
      put the filename of stack newStackName into newFile
      put file_GetRelativePath (newFile, baseFolder, commonPath) into newRelativeFile
      put newRelativeFile into stackFileArray [newStackName]
      
      put the mainstack of stack newStackName into mainStackName
      if mainStackName is not among the lines of oMainStacks then
         delete stack mainStackName
      end if
   end repeat
   unlock messages
   
   put stackFile_FromArray(stackFileArray) into newStackFiles
   return newStackFiles
end stackFile_AddStackNames

function stackFile_GetRelativeFileIndex stackName
   put stackFile_GetRelativeArray (stackName) into relativeFileDictionary
   return keys (relativeFileDictionary)
end stackFile_GetRelativeFileIndex

function stackFile_GetStackNameIndex stackName
   -- was "getLinked_StackNames"
   put the stackfiles of stack stackName into stackFileTable
   put stackFile_ToArray (stackFileTable) into stackNameDictionary
   return keys (stackNameDictionary)
end stackFile_GetStackNameIndex

function stackFile_ConstructFileIndex stackFileTable, stackFile
   -- was fileIndex_FromStackFiles
   put folder_Above(stackFile) into stackRoot
   -- add the stack as the stackFiles may not be linked to itself (unless there are substacks)
   -- bit odd to do this generally?
   put stackFile into longFileNames
   repeat for each line stackFileLine in stackFileTable
      delete item 1 of stackFileLine
      put file_FromRelativeRoot(stackFileLine, stackRoot) into newLine
      if newLine is not among the lines of longFileNames then
         put return & newLine after longFileNames
      end if
   end repeat
   return longFileNames
end stackFile_ConstructFileIndex
