script "lib_Encoding"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_Encoding
type: script library
version: 0.3

/*
This library is a collection of handlers that encode and decode strings.
In particular we focus on getting into and out of utf8 for XML and JSON.

This all needs sorting and researching and organising, with some good documentation written.
*/

--> Encoding
-
command sitemap_EntityEscape @someURL
   -- see http://www.sitemaps.org/protocol.html#escaping
   text_Utf8Encode someURL
   set the itemdelimiter to "/"
   repeat with itemNum = 1 to the number of items of someURL
      put urlencode (item itemNum of someURL) into item itemNum of someURL
   end repeat
   -- maybe some others need escaping, maybe none of these are actually needed
   replace "%3A" with ":" in someURL
   replace "%26" with "&" in someURL
   replace "%3D" with "=" in someURL
   xml_Escape someURL
end sitemap_EntityEscape


--> UTF8
-
function json_Utf8Encode pString
   return json.encodeString (pString)
end json_Utf8Encode

private function json.decode pString
   switch pString
      case "false"
         return "false"
         break
      case "true"
         return "true"
         break
      case "null"
         return empty
         break
      default
         if pString is a number then
            return pString
         else
            replace "\" & quote with quote in pString
            replace "\\" with "\" in pString
            replace "\b" with numtochar(8) in pString
            replace "\t" with numtochar(9) in pString
            replace "\f" with numtochar(12) in pString
            replace "\r" with numtochar(13) in pString
            replace "\n" with numtochar(10) in pString
            
            -- some more common unicode escapees
            replace "\u0022" with quote in pString
            replace "\u005C" with "\" in pString
            -- any others
            if "\u" is in pString then
               put unicodeEscapes(pString) into pString
            end if
            
            if not sOutputUnicode then
               return utf8decode(pString)
            else
               return pString
            end if
         end if
   end switch
end json.decode

private function unicodeEscapes pString
   put false into inEsc
   repeat for each char c in pString
      add 1 to count
      put c after buffer
      
      if count < 2 then next repeat
      
      if buffer is "\u" then put true into inEscape
      
      if inEscape then 
         if length(buffer) < 6 then 
            next repeat 
         else 
            -- TO DEAL WITH DIACRITICS : 
            -- TKD (26-07-2012): The output of this should be UTF-8. 
            -- The original code returned platform specific encoding. On Windows
            -- this worked fine as the code is the same as UTF-8. On Mac this is
            -- not correct. The code did not take into account integers > 255.
            --            if platform() is "MacOS" then 
            --               put isotomac(numtochar(baseconvert(char 3 to 6 of buffer, 16, 10))) into buffer 
            --            else 
            --               put numtochar(baseconvert(char 3 to 6 of buffer, 16, 10)) into buffer 
            --            end if 
            set the useUnicode to true
            try
               # might not be a valid conversion (think C:\Users\...)
               put unidecode(numToChar(baseconvert(char 3 to 6 of buffer, 16, 10)), "utf8") into buffer
            catch e
            end try
            set the useUnicode to false
            
            put buffer after nString
            put empty into buffer
            put false into inEscape
            put 0 into count
         end if 
      else 
         put char 1 of buffer after nString 
         delete char 1 of buffer 
      end if 
      
   end repeat
   put buffer after nString
   return nString
end unicodeEscapes

private function json.encodeValue pString
   switch pString
      case true
         return "true"
         break
      case false
         return "false"
         break
      case "null"
         return "null"
         break
      case empty
         return quote & quote
         break
      default
         if pString is not a number OR pString contains NULL OR the last char of word 1 to -1 of pString is "." then #TKD Things like "3." or unicode ". " (period followed by NULL) need to be encoded by LiveCode says it is a number
            return kwote (json.encodeString(pString))
         else
            return pString
         end if
         break
   end switch
end json.encodeValue

private function json.encodeString pString
   replace "\" with "\\" in pString
   replace quote with "\u0022" in pString
   replace numtochar(8) with "\b" in pString
   replace numtochar(9) with "\t" in pString
   replace numtochar(10) with "\n" in pString
   replace numtochar(12) with "\f" in pString
   replace numtochar(13) with "\r" in pString
   
   repeat for each item i in "0,1,2,3,4,5,6,7,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"
      replace numtochar(i) with "\u" & format("%04X", i) in pString
   end repeat
   
   if sUnicodeInput then
      return pString
   else
      # TKD: This shouldn't be necessary. If not UTF8 then it is platform encoded and
      #          utf8encode will translate it to UTF8. That is what JSON wants. [Untested]
      --      -- TO DEAL WITH DIACRITICS : 
      --      if platform() is "MacOS" then 
      --         repeat with i=129 to 255 
      --            put numtochar(i) into c 
      --            put format("%04x",chartonum(mactoiso(c))) into tHexEncode 
      --            replace c with "\u" & tHexEncode in pString 
      --         end repeat 
      --      else 
      --         repeat with i=129 to 255 
      --            replace numtochar(i) with "\u" & format("%04x", i) in pString 
      --         end repeat 
      --      end if
      
      return utf8encode(pString)
   end if
end json.encodeString

private function json.toUtf8 @pJson
   local tNulls = "1111"
   
   repeat with n = 1 to 4
      if (byte n of pJson is null) then put 0 into char n of tNulls
   end repeat
   
   put (char 1 of (binaryencode("I",1)) is null) into bigEndian
   
   switch tNulls
      case "1111"  -- UTF-8
         return pJson
         break
      case "0101"  -- UTF-16BE
         if bigEndian then
            return utf8encode(pJson, true)
         else
            return utf8encode(swapEndianness(pJson), true)
         end if
         break
      case "1010"  -- UTF-16LE
         if not bigEndian then
            return utf8encode(pJson, true)
         else
            return utf8encode(swapEndianness(pJson), true)
         end if
         break
      case "0001"  -- UTF-32BE
         return "libJson-error: 4 byte unicode, can't decode"
         break
      case "1000"  -- UTF-32LE
         return "libJson-error: 4 byte unicode, can't decode"
         break
   end switch
end json.toUtf8

private function swapEndianness pString, pSize
   if pSize is empty then put 2 into pSize
   repeat with n = 1 to length(pString) step pSize
      repeat with s = pSize - 1 down to 0
         put byte n + s of pString  after nString
      end repeat
   end repeat
   return nString
end swapEndianness

private function utf8encode pString, pIsUnicode
   if pIsUnicode then
      return unidecode(pString, "UTF8")
   else
      return unidecode(uniencode(pString),"UTF8")
   end if
end utf8encode

private function utf8decode pString, pToUnicode
   if pToUnicode then
      return uniencode(pString,"UTF8")
   else
      return unidecode(uniencode(pString,"UTF8"))
   end if
end utf8decode


--> Xml | Escape
-
command xml_Escape @someText
    -- was "text_XmlEscape", "xmlSafeText"
    
    -- chardata regExp:  [^<&]* - ([^<&]* ']]>' [^<&]*)
    /*
    The ampersand character (&) and the left angle bracket (<) MUST NOT appear in their literal form,
    except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
    if they are needed elsewhere, they MUST be escaped using either numeric character references
    or the strings "&amp;" and "&lt;" respectively. 
    The right angle bracket (>) may be represented using the string "&gt;", 
    and MUST, for compatibility, be escaped using either "&gt;" or a character reference
    when it appears in the string "]]>" in content, when that string is not marking the end of a CDATA section.
    */
    
    replace "&" with "&amp;" in someText
    replace "<" with "&lt;" in someText
    replace ">" with "&gt;" in someText
    
    /*
    To allow attribute values to contain both single and double quotes, 
    the apostrophe or single-quote character (') may be represented as
    "&apos;", and the double-quote character (") as "&quot;".
    */
    
    replace "'" with "&apos;" in someText
    replace quote with "&quot;" in sometext
    
    -- do tabs as well?
    replace tab with "&#9;" in someText
end xml_Escape

command xml_UnEscape @someText
   -- do tabs as well?
   replace "&#9;" with tab in someText
   
   replace "&amp;" with "&" in someText
   replace "&lt;" with "<" in someText
   replace "&gt;" with ">" in someText
   
   replace "&apos;" with "'" in someText
   replace "&quot;" with quote in sometext
end xml_UnEscape

command xml_SetTagSafe @tagName
    -- check xml stuff 
    -- this handler should remove any invalid chars in an xmL tag name
    -- ideally in a way in which it can be restored automatically!
    
    replace space with "_" in  tagName
    -- put wiki_ConstructID(tagName) into tagName
end xml_SetTagSafe

command xml_SafeEncodeNodeContents @nodeContents
   xml_Escape nodeContents
   put unidecode(uniencode(nodeContents,"UTF8"),"ANSII") into nodeContents
   
   -- Remove byte order mark from UTF8 text
   put numtochar(239) & numtochar(187) & numtochar(191) into testBomHeader
   if char 1 to 3 of utf8Text = testBomHeader then
      delete char 1 to 3 of tVar
   end if
end xml_SafeEncodeNodeContents

function xml_EncodeString pString, pInEncoding, pOutEncoding
   -- Helper function for converting the encoding of strings when converting to and from XML.
   
   ## convert utf-8 to utf8 for uniencode/decode
   replace "-" with empty in pInEncoding
   replace "-" with empty in pOutEncoding
   
   if pInEncoding is not empty then
      -- if pOutEncoding is empty then pString will be converted to the current platform encoding
      return unidecode(uniencode(pString, pInEncoding), pOutEncoding)
   else
      if pOutEncoding is not empty then
         -- if pInEncoding is empty then pString is assumed to be in the current platform encoding
         return unidecode(uniencode(pString, pInEncoding), pOutEncoding)
      else
         return pString
      end if
   end if
end xml_EncodeString


command text_UnixToMac @someText
   -- was called "text_MacToUnix"
   /*
   Rev uses unix style text internally (numToChar(10) for line endings)
   That is "fld "Text" contains numtochar(10) = true"
   
   If written to a file on a Mac, using URL "file:", they're automatically translated to Macs native numToChar(13).
   if using URL "binfile:", no translation happens, so numToChar(10) is preserved. 
   */
   if the platform = "MacOS" then
      replace numtochar(13) with numtochar(10) in someText
   end if
end text_UnixToMac

command text_MacToUnix @someText
    -- was called "text_MacToUnix"
    -- rev does this automatically by itself (but may need for CGI's or returning data from a unix server)
    replace numtochar(10) with numtochar(13) in someText
end text_MacToUnix

command text_PListEscape @someText
    /*
    \ a backslash character
    " a quote character
    b a backspace character
    n a newline character
    r a carriage return character
    t a tab character
    OOO (three octal digits) an arbitrary ascii character
    UXXXX (where X is a hexadecimal digit) a an arbitrary unicode character
    */
    
    replace "\" with "\\" in someText
    replace quote with ("\" & quote) in someText
    replace numtochar(8) with ("\b") in someText
    replace numtochar(10) with ("\n") in someText
    replace numtochar(13) with ("\r") in someText
    replace tab with ("\t") in someText
end text_PListEscape

function text_SwapEOL pText, pWhat
    /*
    Swap Ends of Line 
    Does a swap between cr and "¬". This is necessary as the matchtext and replacetext functions only look for 
    a match within a line, when using regular expressions
    */
    switch pWhat
        case "remove"
            replace cr with xEOL in pText
            break
        case "restore"
            replace xEOL with cr in pText
            break
    end switch
    return pText
end text_SwapEOL


--> Text | Utf8
-
function utf8_Encode someText
   put unidecode(uniencode(someText),"UTF8") into encodedText
   return encodedText
end utf8_Encode

command text_Utf8Decode @utf8Text
   put unidecode(uniencode(utf8Text,"UTF8")) into utf8Text
   -- put uniencode(utf8Text,"UTF8") into someU16
   -- put unidecode(someU16, "ANSI") into utf8Text
end text_Utf8Decode

command text_Utf8Encode @someText
   -- put unidecode(uniencode(someText),"UTF8") into someText
   put utf8_Encode (someText) into someText
end text_Utf8Encode

function text_Utf8ToHtml someUtf8, someField
    lock screen
    put the htmltext of someField into oHtml
    put uniencode(someUtf8, "UTF8") into someU16
    set the unicodetext of someField to someU16
    put the htmltext of someField into someHtml
    delete char 1 to 3 of someHtml
    set the htmltext of someField to oHtml
    unlock screen
    delete char -4 to -1 of someHtml
    return someHtml
end text_Utf8ToHtml
