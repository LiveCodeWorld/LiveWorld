script "lib_LiveCodeWorld"
--> MetaData
-
license: GPLv3
name: lib_LiveCodeWorld
type: script library
version: 0.4

/*
This library is for organising, creating, versioing and processing all script only library files in the LiveCode World project.
*/


--> Currently Working On | Library | Folders
-
function lcw_GetControllerFolder
   put lcw_GetFolder ("controller") into lcwControllerFolder
   return lcwControllerFolder
end lcw_GetControllerFolder

function lcw_GetProjectFolder newFolderName
   -- total hack for now
   -- folders are set in global prefs
   -- so can be anywhere the users sets
   
   local pProjectName
   lcw_OldName newFolderName
   put project_GetFolder (newFolderName, pProjectName) into someFolder 
   return someFolder
end lcw_GetProjectFolder

function lcw_GetFolder folderName
   -- returns the path to a folder inside the user defined repo folder
   -- if the folder does not exist it returns empty
   -- if a repo is not set you are asked to set one (hack), and the result is stored as a user preference
   
   switch folderName
      case "Library Stacks"
         put library_StandardFolder() into lcwFolder
         break
      default
         lcw_NewName folderName
         put lcw_GetRepoFolder() into libraryRepoFolder
         if char -1 of folderName is not slash then put slash after folderName
         put libraryRepoFolder & folderName into lcwFolder
   end switch
   
   if there is a folder lcwFolder then
      return lcwFolder
   else
      return empty
   end if
end lcw_GetFolder


--> Library | Folders | Repo
-
/*
Here we store all new script -only code for the Liveworld Environment.
The aim is to gradually move over to this repository, or use git-subtree to move code here.
*/

function lcw_GetRepoFolder
   -- library_GetRepoFolder
   put pref_GetValue ("libraryRepoFolder") into libraryRepoFolder
   if libraryRepoFolder is empty then lcw_SetRepoFolder libraryRepoFolder
   if char -1 of libraryRepoFolder is not slash then put slash after libraryRepoFolder
   return libraryRepoFolder
end lcw_GetRepoFolder

command lcw_SetRepoFolder @pLibraryRepoFolder
   -- library_SetRepoFolder
   if pLibraryRepoFolder is empty then
      answer folder "Select your Liveworld repository folder"
      put it into pLibraryRepoFolder
      if it is empty then exit to top
   end if
   if char -1 of pLibraryRepoFolder is not slash then put slash after pLibraryRepoFolder
   pref_SetValue "libraryRepoFolder", pLibraryRepoFolder
end lcw_SetRepoFolder


--> LiveCode World
-
command lcw_CreateLibrary libType, pQuestion, pExample, pAddToUsed
   -- this handler creates a script only stack in the corresponding folder of the Livecode World Library
   
   if pQuestion is empty then put "Give your library a name" into pQuestion
   if pExample is empty then put "lib_Example" into pExample
   
   put opn_Ask (pQuestion, pExample) into libName
   if there is a stack libName then
      go to stack libName
      answer warning "Already a stack with that name!"
      exit to top
   end if
   
   put _constructScriptOnlyMenuFileName (libName) into shortFile
   put lcw_GetFolder (libType) into lcwFolder
   if lcwFolder is empty then
      -- safety check
      answer warning "Cannot locate Livecode World standard model folder!"
      exit to top
   end if
   
   put lcwFolder & shortFile into lcwLibraryFile
   
   -- revIDENewScriptOnlyStackWithScript pName, pScript
   create script only stack libName
   show stack libName
   set the filename of stack libName to lcwLibraryFile
   
   put metadata_ConstructUripArray (libName, libType) into uRipArray
   set the script_MetaData of stack libName to uRipArray
   
   save stack libName
   set the stack_IsKnown of stack libName to true
   if pAddToUsed is true then
      set the stack_IsLibrary of stack libName to true
   end if
   
   edit the script of stack libName
   opn_Notify ("Stack" && kwote (libName) && "is now known and used!")
   return libName
end lcw_CreateLibrary


--> Library | Folders | To Move
-
function library_ScriptOnlyModelFolder shortFileBit, pDontCreate
   -- script only stacks
   return library_PluginFolder ("opn_Model/", pDontCreate) & shortFileBit
end library_ScriptOnlyModelFolder

function library_ScriptOnlyBehaviorFolder shortFileBit, pDontCreate
   -- script only stacks
   return library_PluginFolder ("opn_Behaviors/", pDontCreate) & shortFileBit
end library_ScriptOnlyBehaviorFolder

function library_ScriptOnlyFolder shortFileBit, pDontCreate
   -- script only stacks
   return library_PluginFolder ("opn_Text/rev/libraries/", pDontCreate) & shortFileBit
end library_ScriptOnlyFolder


-- > Livecode World | Model | Folders
-
command lcw_CheckStacks newFolderName
   local pProjectName
   lcw_OldName newFolderName
   put project_GetFolder (newFolderName, pProjectName) into someFolder 
   
   folder_CheckStacks someFolder
   put the result into shortStackNames
   return shortStackNames
end lcw_CheckStacks


--> Livecode World | List
-
function lcw_ListProjects
   put library_FetchSetData() into modelArray
   delete variable modelArray ["All"]
   delete variable modelArray ["None"]
   put keys (modelArray) into setNames
   sort setNames
   return setNames
end lcw_ListProjects

function lcw_ListStackNames newFolderName
   local pProjectName
   lcw_OldName newFolderName
   put project_GetFolder (newFolderName, pProjectName) into someFolder 
   put folder_ListStackNames (someFolder) into stackNames
   return stackNames
end lcw_ListStackNames

function lcw_ListStacks newFolderName
   put lcw_GetProjectFolder (newFolderName) into someFolder
   put folder_ListStacks (someFolder) into stackObjects
   return stackObjects
end lcw_ListStacks

function lcw_ListStackPaths folderName
   put lcw_GetFolder (folderName) into someFolder 
   put folder_ListStackPaths (someFolder) into longStackFiles
   return longStackFiles
end lcw_ListStackPaths

function lcw_ListShortStackFiles folderName
   local pProjectName
   lcw_OldName folderName
   put project_GetFolder (folderName, pProjectName) into someFolder 
   put folder_ListShortStackFiles (someFolder) into shortFiles
   return shortFiles
end lcw_ListShortStackFiles


-- > LCW | Hack
-
command lcw_NewName @folderName
   /*
   This hack translate old ugly foler names to the new ones.
   We should look to rename the oln data structures, but for now this hack gives us an api
   */
   put lcw_MapDictionary() into mapDictionary
   get mapDictionary [folderName]
   if it is not empty then
      put tolower (it) into folderName
   end if
end lcw_NewName

command lcw_OldName @folderName
   /*
   This hack translate old ugly folder names to the new ones.
   We should look to rename the oln data structures, but for now this hack gives us an api
   */
   put lcw_ReverseDictionary() into mapDictionary
   get mapDictionary [folderName]
   if it is not empty then put it into folderName
end lcw_OldName


-- > LCW | Dictionary
-
function lcw_MapDictionary
   local mapDictionary
   
   dictionary_Map mapDictionary, "Model Stacks", "Model"
   dictionary_Map mapDictionary, "Views", "View"
   dictionary_Map mapDictionary, "Menus", "Controller"
   dictionary_Map mapDictionary, "Named Behaviors", "Behavior"
   dictionary_Map mapDictionary, "Script Only Libs", "Library"
   dictionary_Map mapDictionary, "Library Stacks", "Livecode Library Stacks"
   
   return mapDictionary
end lcw_MapDictionary

function lcw_ReverseDictionary
   local mapDictionary
   
   dictionary_ReverseMap mapDictionary, "Model Stacks", "Model"
   dictionary_ReverseMap mapDictionary, "Views", "View"
   dictionary_ReverseMap mapDictionary, "Menus", "Controller"
   dictionary_ReverseMap mapDictionary, "Named Behaviors", "Behavior"
   dictionary_ReverseMap mapDictionary, "Script Only Libs", "Library"
   dictionary_ReverseMap mapDictionary, "Library Stacks", "Livecode Library Stacks"
   
   return mapDictionary
end lcw_ReverseDictionary


-- > Dictionary
-
command dictionary_Map @normalDictionary, termToMap, normalisedTerm
   put normalisedTerm into normalDictionary [termToMap]
end dictionary_Map

command dictionary_ReverseMap @normalDictionary, termToMap, normalisedTerm
   put termToMap into normalDictionary [normalisedTerm]
end dictionary_ReverseMap

command dictionary_Add @twoWayDictionary, firstTerm, secondTerm
   put firstTerm into twoWayDictionary [secondTerm]
   put secondTerm into twoWayDictionary [firstTerm]
end dictionary_Add


-- > Folder | Stacks
-
command folder_CheckStacks someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the stack_IsKnown of stack stackFilePath into wasKnown
         if wasKnown is false then
            set the stack_IsKnown of stack stackFilePath to true
            put the stack_IsKnown of stack stackFilePath into isKnown -- just for debugging check
         end if
         
         put the short name of stack stackFilePath into shortName
         put shortName & CR after shortNames
      end if
   end repeat
   delete char -1 of shortName
   set the defaultfolder to oFolder
   return shortName
end folder_CheckStacks

function folder_ListStackNames someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the short name of stack stackFilePath & CR after stackNames
      end if
   end repeat
   delete char -1 of stackNames
   set the defaultfolder to oFolder
   return stackNames
end folder_ListStackNames

function folder_ListStacks someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put the name of stack stackFilePath & CR after stackObjects
      end if
   end repeat
   delete char -1 of stackObjects
   set the defaultfolder to oFolder
   return stackObjects
end folder_ListStacks

function folder_ListStackPaths someFolder
   if char -1 of someFolder is not slash then put slash after someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      put someFolder & shortFile into stackFilePath
      if there is a stack stackFilePath then
         put stackFilePath & CR after stackFilePaths
      end if
   end repeat
   delete char -1 of stackFilePaths
   set the defaultfolder to oFolder
   return stackFilePaths
end folder_ListStackPaths

function folder_ListShortStackFiles someFolder
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put the files into shortFiles
   
   set the itemdelimiter to "."
   repeat for each line shortFile in shortFiles
      if there is a stack shortFile then
         put shortFile & CR after shortStackFiles
      end if
   end repeat
   delete char -1 of shortStackFiles
   set the defaultfolder to oFolder
   return shortStackFiles
end folder_ListShortStackFiles


--> Private
-
private function _constructScriptOnlyMenuFileName libName
   -- set the itemdelimite to " | "
   replace " | " with "_" in libName
   replace "|" with "_" in libName -- just in case
   -- replace space with empty in libName -- maybe good to do this and use initialcaps algo to reconsitute ???
   put libName & ".livecodescript" into shortFile
   return shortFile
end _constructScriptOnlyMenuFileName
