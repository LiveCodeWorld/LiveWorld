script "lib_ViewTemplate"
--> MetaData
-
license: GPLv3
name: lib_ViewTemplate
type: script library
version: 2.1

/*
This script-only library is a utility for browsing, testing and authoring lcw views.
It should not required for the functioning of the views to work.
*/


--> Currently Working On (needs renaming)
-
getprop view_Library
   -- a default library stack associated with a view
   put the view_Name of the target into viewName
   set the itemdelimiter to "|"
   repeat with itemNum = the number of items of viewName down to 2
      put "libOPN_" & item itemNum of viewName into stackName
      if exists(stack stackName) then
         return the name of stack stackName
      end if
   end repeat
   return empty
end view_Library

setprop view_TemplateName newName
   if word 1 of the target = "stack" then
      put the short name of the target into oldName
   else
      put the view_Name of the target into oldName
   end if
   view_RenameTemplate oldName, newName
   return the result
end view_TemplateName

function view_GetTemplateObject vName
   view_NormalizeName vName
   if exists (control 1 of card 1 of stack vName) then
      put the long id of control 1 of card 1 of stack vName into templateObject
      return templateObject
   end if
   return empty
   
   -- slow due to loops through every template in the array
   -- consider creating a reverse array cache
   -- put hArray_GetViewTemplate (vName) into templateObject
   -- return templateObject
end view_GetTemplateObject

getprop view_TemplateStack
   put the view_Name of the target into viewName
   if exists(stack viewName) is false then return empty
   put the name of stack viewName into stackObject
   return stackObject
end view_TemplateStack

function view_TemplateObjects pObjectFormat
   put view_TemplateFiles() into viewFiles
   
   put the mainstacks into oMainStacks
   set the wholematches to true
   repeat for each line someFile in viewFiles
      set the cursor to busy
      if exists (control 1 of card 1 of stack someFile) then
         put the long id of control 1 of card 1 of stack someFile into libraryObject
         
         switch pObjectFormat
            case "mobile_Name"
               put the long name of libraryObject into libraryObject
               object_SetShortStackName libraryObject, mainStackStart, mainStackEnd
               put libraryObject & CR after libraryObjects
               break
            case "mobile_ID"
               object_SetShortStackName libraryObject, mainStackStart, mainStackEnd
               put libraryObject & CR after libraryObjects
               break
            case "long id"
               put libraryObject & CR after libraryObjects
               break
            default -- case "rugged_ID"
               put the rugged_ID of libraryObject & CR after libraryObjects
         end switch
      end if
      
      if the short name of stack someFile is not among the lines of oMainStacks then
         -- re-release previously unloaded stack from memory
         -- breakpoint
         delete stack someFile
      end if
   end repeat
   delete last char of libraryObjects
   return libraryObjects
end view_TemplateObjects

function view_GetTemplateCard vName
   if vName is empty then return empty
   view_NormalizeName vName
   put view_NameToFile (vName, "rev") into longStackName
   if exists (stack longStackName) is false then put view_NameToFile (vName, "livecode") into longStackName
   if exists (stack longStackName) is false then return empty
   put the long id of card 1 of stack longStackName into viewTemplateCard 
   return viewTemplateCard
end view_GetTemplateCard


--> View Template | Icons
-
/*
A view_Template is a view library stack, that uses a behavior shared with other view library stacks.
These other view library stacks should share the same view (the view_Template),
but differ only in exposed public properites of the view.
*/

function view_FindTemplateIconGroup vName
   if vName is emtpy then return empty
   put view_GetTemplateObject (vName) into templateObject
   if exists (templateObject) is false then return empty
   put the stack_Object of templateObject into stackObject
   if exists (group "Icons" of cd 2 of stackObject) is false then return empty
   
   put the long id of group "Icons" of cd 2 of stackObject into templateIconGroup
   return templateIconGroup
end view_FindTemplateIconGroup

command view_CreateTemplateIconGroup viewTemplate
   if exists (viewTemplate) is false then return empty
   put the stack_Object of viewTemplate into viewTemplateStack
   put the defaultstack into oDefaultStack
   set the defaultstack to viewTemplateStack
   
   if exists (card "View Behavior") then
      go to card "View Behavior"
   else
      create card "View Behavior"
   end if
   
   put the card_View ["View|Image|Icons"] of card "View Behavior" into iconView
   if exists (iconView) then return iconView
   
   put the rect of this card into someRect
   put rect_SubtractMargin ("12,80,12,12", someRect) into someRect
   
   set the view_Insert [someRect] of card "View Behavior" to "View|Image|Icons" 
   put the result into createdView
   return createdView
end view_CreateTemplateIconGroup



--> Template | Property Menu
-
getprop template_PropertyMenu [pFetchLive]
   if pFetchLive is true then
      local liveMenu, publicProps
      put the view_Template of the target into templateObject
      extractViewPropertyMenu templateObject, liveMenu, publicProps
      return liveMenu
   else
      put the template_Array of the target into templateArray
      put the uOPN_ViewArray of templatePropertyModel into templateArray
      put templateArray ["metadata"]["view_PropertyMenu"] into cachedMenu
      return cachedMenu
   end if
end template_PropertyMenu

setprop template_PropertyMenu cachedMenu
   put the template_Array of the target into templateArray
   put the uOPN_ViewArray of templatePropertyModel into templateArray
   put cachedMenu into templateArray ["metadata"]["view_PropertyMenu"]
   set the uOPN_ViewArray of templatePropertyModel to templateArray
   return templateArray
end template_PropertyMenu

function template_GetPropertyMenu vName, pFetchLive
   if exists (stack vName) is false then return empty
   put the name of stack vName into templatePropertyModel
   
   put the uOPN_ViewArray of templatePropertyModel into templateArray
   put templateArray ["metadata"]["view_PropertyMenu"] into cachedMenu
   
   if cachedMenu is empty or pFetchLive is true then
      local liveMenu, publicProps
      put view_GetTemplateObject (vName) into templateObject
      extractViewPropertyMenu templateObject, liveMenu, publicProps
      return liveMenu
   else
      return cachedMenu
   end if
end template_GetPropertyMenu

getprop view_HasProp [propName]
   put the view_Props of the target into viewProps
   return propName is among the lines of viewProps
end view_HasProp

getprop view_Props [fetchLive]
   put the template_MetaData ["view_Props"] of the target into cachedProps
   if cachedProps is empty or fetchLive is true then
      local liveMenu, publicProps
      put the long id of the target into targetObject
      extractViewPropertyMenu targetObject, liveMenu, publicProps
      return publicProps
   else
      return cachedProps
   end if
end view_Props

setprop view_Props viewProps
   set the template_MetaData ["view_Props"] of the target to viewProps
   return the result
end view_Props

getprop view_PropertyMenu [fetchLive]
   put the template_MetaData ["view_PropertyMenu"] of the target into cachedMenu
   if cachedMenu is empty or fetchLive is true then
      local liveMenu, publicProps
      put the long id of the target into targetObject
      extractViewPropertyMenu targetObject, liveMenu, publicProps
      return liveMenu
   else
      return cachedMenu
   end if
end view_PropertyMenu

setprop view_PropertyMenu cachedMenu
   set the template_MetaData ["view_PropertyMenu"] of the target to cachedMenu
   return the result
end view_PropertyMenu

getprop view_LivePropertyMenu
   put the long id of the target into targetObject
   local liveMenu, publicProps
   extractViewPropertyMenu targetObject, liveMenu, publicProps
   return liveMenu
end view_LivePropertyMenu

getprop view_PropertyMenuIsCached
   put the template_MetaData of the target into metaArray
   put keys(metaArray) into metaKeys
   set the wholematches to true
   return "view_PropertyMenu" is among the lines of metaKeys
end view_PropertyMenuIsCached

setprop view_PropertyMenuIsCached someBoolean
   set the cursor to watch -- this can take a long time
   put the long id of the target into targetObject
   if someBoolean is true then
      local liveMenu, publicProps
      extractViewPropertyMenu targetObject, liveMenu, publicProps
      set the view_Props of the target to publicProps
      set the template_MetaData ["view_PropertyMenu"] of targetObject to liveMenu
      return liveMenu
   else
      -- set the view_PropertyMenu of targetObject to empty
      set the template_MetaData ["view_PropertyMenu"] of targetObject to empty
      set the view_Props of the target to empty
      return empty
   end if
end view_PropertyMenuIsCached

getprop script_PublicProps
   local propMenu, publicProps
   put the long id of the target into scriptObject
   
   extractViewPropertyMenu scriptObject, propMenu, publicProps
   sort publicProps
   return publicProps
end script_PublicProps

command view_DoPropertyMenu viewPropPath, someView
   menu_SetChoice viewPropPath, publicProp, publicValue
   if publicValue is empty then
      put view_AskPublicValue (publicProp, someView) into publicValue
      set the publicProp of someView to publicValue
   else
      -- if publicValue is not an "s", or perhaps a switch
      -- lets check by introspecting the script and checking the name of the param
      put the view_BehaviorScript of someView into viewBehaviorScript
      put script_GetSetProp (publicProp, viewBehaviorScript) into propHandler
      if propHandler is empty then
         -- check to see if it is OK, then continue
         breakPoint
      end if
      
      script_DeconstructSetPropHandler propHandler, handlerName, setPropValue, setPropParam
      if setPropParam = empty then
         set the publicProp of someView to publicValue
      else
         view_DoParamProp someView, publicProp, publicValue
      end if
   end if
end view_DoPropertyMenu


--> View | Properties | Vanilla
-
/*
Sets plain custom properties of the existing (usually the default) custom propertew_DisplayProperty ["record_LabelWidth"] of me to recordLen if the value is empty). 
*/

getprop view_DisplayProperty [someProp]
   put the long id of the target into someView
   repeat
      put the view_Object of someView into someView
      if exists (someView) is false then return empty
      
      put the customproperties of someView into displayArray
      if someProp is among the lines of the keys of displayArray then -- allows returning empty if key is present
         return displayArray [someProp]
      end if
      
      delete word 1 to 4 of someView
      if word 1 of someView is among the items of "card,stack" then return empty -- recursion problem if someView = "card..." as a bg view will keep getting called
      if exists (someView) is false then return empty
   end repeat
end view_DisplayProperty

setprop view_DisplayProperty [someProp] someValue
   put the long id of the target into targetObject
   
   -- put the view_DisplayArray of targetObject into displayArray
   -- put someValue into displayArray [someProp]
   -- set the view_DisplayArray of targetObject to displayArray
   
   -- lock messages
   -- set the someProp of targetObject to someValue
   -- to avoid recursion possibility
   put the customproperties of targetObject into cArray
   put someValue into cArray [someProp]
   set the customproperties of targetObject to cArray
   
   repeat with cNum = 1 to the number of controls of targetObject
      put the long id of control cNum of targetObject into cObject
      custom_DeleteProperty someProp, cObject
   end repeat
   -- unlock messages
end view_DisplayProperty



--> TemplateStack | Props
-
/*
The "view_TemplateArray" is stored in the stack of the library object, as this makes it more portable / easier to send.
Use for default values for all views, or default behaviors of tools for views that require common data to work.
*/

getprop template_DisplayArray
   put the template_Array of the target into viewArray
   put viewArray ["display"] into displayArray
   return displayArray
end template_DisplayArray

setprop template_DisplayArray displayArray
   put the template_Array of the target into viewArray
   put displayArray into viewArray ["display"]
   set the template_Array of the target to viewArray
end template_DisplayArray

getprop template_MetaData [pPropName]
   put the template_Array of the target into templateArray
   if pPropName is empty then
      put templateArray ["metadata"] into mData
   else
      put templateArray ["metadata"][pPropName] into mData
   end if
   return mData
end template_MetaData

setprop template_MetaData [pPropName] mData
   put the template_Array of the target into templateArray
   if pPropName is empty then
      put mData into templateArray ["metadata"]
   else
      put mData into templateArray ["metadata"][pPropName]
   end if
   set the template_Array of the target to templateArray
   return templateArray
end template_MetaData

getprop template_DataArray
   -- used for default values (ie in newly created objects)
   put the long id of the target into someView 
   put the template_Array of someView into viewArray
   return viewArray ["data"]
end template_DataArray

setprop template_DataArray [modelType] dataArray
   -- store default values (ie in newly created objects) with this script 
   put the long id of the target into someView 
   put the template_Array of someView into viewArray
   put dataArray into viewArray ["data"]
   set the template_Array of someView to viewArray
end template_DataArray

getprop template_CardBehavior
   put behavior_GetObject ("Card View Behavior") into someObject
   return someObject
end template_CardBehavior

getprop template_Card
   put the view_Template of mTarget into templateObject
   put the the card_Object of templateObject into someObject
   return someObject
end template_Card

getprop template_Model
   put the view_Object of the target into viewObject
   if exists (viewObject) is false then return empty
   put the view_Name of viewObject into vName
   if exists (stack vName) is false then return empty
   put the name of stack vName into templatePropertyModel
   return templatePropertyModel
end template_Model

getprop template_Array
   -- a structural mirror of "view_Array"
   put the template_Model of the target into templateModel
   if exists (templateModel) is false then return empty
   lock messages -- so as not to trigger custom prop
   put the view_Array of templateModel into templateArray
   unlock messages
   return templateArray
end template_Array

setprop template_Array templateArray
   -- a structural mirror of "view_Array"
   put the template_Model of the target into templateModel
   
   lock messages -- so as not to trigger custom prop
   set the view_Array of templateModel to templateArray
   unlock messages
   
   return templateModel
end template_Array

getprop view_TemplateName
   -- could distinguish between view_Names and the original name of compound views
   return the view_Name of the target
end view_TemplateName

getprop templateStack_View
   -- a behavior of a template stack
   if the stack_IsTemplate of the target is false then return empty -- for now lets check
   
   -- a sensible default that can be overridden
   put the stack_Name of the target into vName
   if exists (control 1 of card 1 of stack vName) is false then return empty
   put the long id of control 1 of card 1 of stack vName into templateObject
   return templateObject
end templateStack_View

getprop view_IsTemplate
   -- this is an old default
   -- best method is to have the behavior of the templates card return true
   -- using it's own "getprop view_IsTemplate" handler
   
   put the view_Name of the target into vName
   if vName is empty then return false
   
   return the stack_IsTemplate of the target
end view_IsTemplate

getprop stack_IsTemplate
   put the stack_Name of the target into vName
   put the filename of stack vName into viewStackFile
   put library_ViewFolder () into viewFolder
   return viewStackFile begins with viewFolder
end stack_IsTemplate

getprop template_DefaultScript [pObjectType]
   put the long id of the target into scriptObject
   
   -- get variables for merge script
   if pObjectType is empty then put "view template" into pObjectType
   put the view_Name of the target into ViewName
   put objectType into UripType
   put user_GetName() into AuthorName
   put the template_ObjectDefScript of scriptObject into DefScript
   
   put script_GetTemplate ("View Template") into templateScript
   put merge (templateScript) into someScript
   return someScript
end template_DefaultScript

getprop template_ObjectDefScript
   local defScript
   put the long id of the target into scriptObject
   
   repeat with cNum = 1 to the number of controls of scriptObject
      put the long id of control cNum of scriptObject into someObject
      put word 1 of someObject into objectType
      put the short name of someObject into someName
      put the view_Name of someObject into vName
      
      put text_InitialCaps (someName) into hName
      replace space with empty in hName
      put tolower (char 1 of hName) into char 1 of hName
      
      if word 1 someObject = "group" then
         put "_View" after hName
         put "return the long id of group" && kwote(someName) && "of me" into scriptLine
         put script_ConstructGetPropHandler (hName, scriptLine) & CR & CR after defScript
      else if vName is not empty then
         put "_View" after hName
         put "return the long id of" && objectType && kwote(someName) && "of me" into scriptLine
         put script_ConstructGetPropHandler (hName, scriptLine) & CR & CR after defScript
      else
         put "Object" after hName
         put "return the long id of" && objectType && kwote(someName) && "of me" into scriptLine
         put "private" && script_ConstructFunctionHandler (hName, scriptLine) & CR & CR after defScript
      end if
   end repeat
   
   delete char -2 to -1 of defScript
   return defScript
end template_ObjectDefScript

getprop template_Icons
   put the template_IconGroup of the target into templateIconGroup
   if exists (templateIconGroup) is false then return empty
   repeat with imageNum = 1 to the number of images of templateIconGroup
      put the short id of image imageNum of templateIconGroup into imageID
      put imageID & CR after imageIDs
   end repeat
   return imageIDs
end template_Icons

getprop template_IconGroup
   if word 1 of the target = "stack" then
      put the short name of the target into vName
      set the wholematches to true
      if vName is not among the lines of view_TemplateNames() then
         return empty
      end if
   else
      put the view_Name of the target into vName
   end if
   put view_FindTemplateIconGroup (vName) into templateIconGroup
   return templateIconGroup
end template_IconGroup

getprop view_Paths [viewName]
   return view_GetFolderOutline(viewName)
end view_Paths

getprop view_TemplateCard
   put the view_Name of the target into vName
   put view_GetTemplateCard (vName) into viewTemplateCard
   return viewTemplateCard
end view_TemplateCard

getprop template_Instances
   put the view_Name of the target into vName
   put view_GetInstances (vName) into vNames
   return vNames
end template_Instances


--> Template | Objects
-
getprop view_Template
   put the view_Name of the target into vName
   put view_GetTemplateObject (vName) into templateObject
   return templateObject
end view_Template

getprop template_Object
   return the view_Template of the target
end template_Object


--> View | Template | Create
-
command template_CreateInvisibleStack viewName   
   if viewName is empty then
      put opn_Ask ("Give this new control a view_Name...", "View|Something|Or Other") into viewName
      template_StackAlreadyExists viewName
   else
      template_StackAlreadyExists viewName
   end if
   
   create invisible stack viewName
   put it into templateStackObject
   set the destroystack of stack viewName to true
   set the destroywindow of stack viewName to true
   
   put template_DefaultCardScript (viewName) into cardScript
   set the script of card 1 of stack viewName to cardScript
   set the behavior_Name of card 1 of stack viewName to "Card View Behavior"
   put viewName into shortViewName
   set the itemdelimiter to "|"
   delete item 1 of shortViewName
   set the itemdelimiter to comma
   set the name of card 1 of stack viewName to shortViewName
         
   put view_NameToFile (viewName) into someFile
   set the fileName of stack viewName to someFile
   
   set lockmessages to true
   save stack viewName
   set lockmessages to false
   set the stack_IsKnown of stack viewName to true
   
   return the name of stack viewName
end template_CreateInvisibleStack

command template_ConstructStackFromObject someObject, pCreateBehavior
   put the name of someObject into helpfulForDebugging
   put the view_Name of someObject into viewName
   
   if viewName is empty then
      put opn_Ask ("Give this new control a view_Name...", "View|Something|Or Other") into viewName
      template_StackAlreadyExists viewName
   else
      template_StackAlreadyExists viewName
   end if
   
   -- create invisible stack viewName
   create stack viewName
   put it into templateStackObject
   set the destroystack of stack viewName to true
   set the destroywindow of stack viewName to true
   
   copy someObject to card 1 of stack viewName
   put it into viewTemplate
   -- set the view_Name of viewTemplate to viewName
   
   if pCreateBehavior is not false then
      -- we can create a behavior stack later easily
      -- view_TemplateAddBehavior viewTemplate, viewName
   end if
   
   set the view_Name ["view template"] of viewTemplate to viewName
   set the visible of stack viewName to true
   
   put view_NameToFile (viewName) into someFile
   set the fileName of stack viewName to someFile
   set the behavior_Name of card 1 of stack viewName to "behavior_ViewTemplateCard"
   
   put viewName into shortViewName
   set the itemdelimiter to "|"
   delete item 1 of shortViewName
   set the itemdelimiter to comma
   set the name of card 1 of stack viewName to shortViewName
   
   put template_DefaultCardScript (viewName) into cardScript
   set the script of card 1 of stack viewName to cardScript
   
   put the width of viewTemplate into sWidth
   put the height of viewTemplate into sHeight
   stack_SetDimensions templateStackObject, sWidth, sHeight
   
   set lockmessages to true
   save stack viewName
   set lockmessages to false
   set the stack_IsKnown of stack viewName to true
   
   return viewTemplate
end template_ConstructStackFromObject

function template_DefaultCardScript viewName
   put menu_GlobalTitleFromViewName (viewName) into mTitle
   put menu_ConstructTemplateScript (mTitle) into cardScript
   return cardScript
   
   /*
   put script_GetTemplate("View Library Card Script") into cardScript
   put user_GetName() into AuthorName
   put view_StemFromName(viewName) into LibraryStem 
   put view_StemFromName(viewName) into LibraryName
   put merge(cardScript) into cardScript
   */
end template_DefaultCardScript

private command template_StackAlreadyExists viewName
   if there is a stack viewName then
      put "There is already a view template stack" && kwote (viewName) & "!" into someComment
      answer warning someComment
      show stack viewName
      go to stack viewName
      exit to top
   end if
end template_StackAlreadyExists

command template_ConstructCloneStack vName, newViewName
   if newViewName is empty then 
      put opn_Ask ("Give the cloned view a name...", vName) into newViewName
      if newViewName is among the lines of view_StackNames() then
         beep
         answer warning merge("The view '[[vName]]' already exists! Please manually delete the file or choose a new name.")
         exit to top
      end if
   end if
   
   put template_DefaultCardScript (newViewName) into cardScript
   
   if vName is empty then
      put empty into stackRect
   else
      put the rect of stack vName into stackRect
   end if
   stack_Create newViewName, vName, 12, stackRect, cardScript
   put the result into viewTemplate
   
   put view_NameToFile (newViewName) into someFile
   put someFile into someFolder
   
   set the itemdelimiter to "/"
   delete item -1 of someFolder
   folder_CreateNested someFolder
   set the itemdelimiter to comma
   
   if exists (stack newViewName) is false then exit to top
   
   set the fileName of stack newViewName to someFile
   save stack newViewName
   
   put the long id of card 1 of stack newViewName into cardObject
   set the behavior_Name of cardObject to "Card View Behavior"
   
   set the view_Name of viewTemplate to newViewName
   set the stack_IsKnown of viewTemplate to true
   
   return viewTemplate
end template_ConstructCloneStack

function template_DefaultCardScript viewName
   put menu_GlobalTitleFromViewName (viewName) into mTitle
   put menu_ConstructTemplateScript (mTitle) into cardScript
   return cardScript
   
   /*
   put script_GetTemplate("View Library Card Script") into cardScript
   put user_GetName() into AuthorName
   put view_StemFromName(viewName) into LibraryStem 
   put view_StemFromName(viewName) into LibraryName
   put merge(cardScript) into cardScript
   */
end template_DefaultCardScript

command template_CreateLibraryStack viewPath, cardMargin
   -- was "libView_CreateBlankViewStack"
   -- see newer "template_ConstructStackFromObject"
   
   if cardMargin is empty then put 12 into cardMargin
   if viewPath is empty then
      put the top_LevelPath [true] of the target into viewStem
      if viewStem is empty then put "Test" into viewStem
      put "|View" after viewStem
      ask "Give this view a class path name.." with viewStem
      put it into viewPath
      if viewPath is empty then
         exit to top
      end if
   end if
   
   put view_NameToFile (viewPath) into someFile
   if there is a file someFile then	# error checking first
      opn_Notify "There is already a view of this name! Here it is!", true
      
      -- put view_GetTemplateObject(viewPath) into someObject
      go to stack viewPath
      exit to top
   end if
   
   stack_Create viewPath
   put the result into createdObject
   
   if exists(createdObject) is false then 
      answer warning "Problem creating library stack!"
      exit to top
   end if
   
   put the stack_Object of createdObject into stackObject
   
   put template_DefaultCardScript() into cardScript
   
   set the script of card 1 of stackObject to cardScript
   set the behavior_Name of card 1 of stackObject to "Card View Behavior"
   
   put view_NameToFile (viewPath) into someFile
   
   -- create folder in case it is not already created
   put someFile into someFolder
   set the itemdelimiter to "/"
   delete last item of someFolder
   folder_CreateNested someFolder
   
   set the filename of stackObject to someFile
   set the destroystack of stackObject to false
   set the destroywindow of stackObject to false
   save stack viewPath
   set the stack_IsKnown of stackObject to true
   
   return stackObject
end template_CreateLibraryStack


--> View | Template
-
command view_TemplateAddBehavior viewTemplate, pEditScripts
   put the view_Name of viewTemplate into vName
   if vName is empty then
      put "The view template has not view_Name set!"
      put viewTemplate
      answer warning someWarning
      breakpoint
      return viewTemplate
   end if
   
   put the stack_Object of viewTemplate into viewTemplateStack
   put the defaultstack into oDefaultStack
   set the defaultstack to viewTemplateStack
   
   if there is a button "View Behavior" of card "View Behavior" then
      -- don't create if it already exists
      set the defaultstack to oDefaultStack
      return the long id of button "View Behavior" of card "View Behavior"
   end if
   
   -- now fetch an appropriate default template behavior script
   put the behavior of viewTemplate into oldBehavior
   if exists(oldBehavior) then
      put the script of oldBehavior into templateBehaviorScript
   else 
      put the script of viewTemplate into templateBehaviorScript
      if the revAvailableHandlers of viewTemplate is empty then
         put the template_DefaultScript ["view behavior"] of viewTemplate into templateBehaviorScript
         put script_GetMetadataArray (templateBehaviorScript) into uRipArray -- ugly, could get from above
         urip_AddDefaults uRipArray, vName, "view behavior"
      else
         put script_GetMetadataArray (templateBehaviorScript) into uRipArray
         urip_AddDefaults uRipArray, vName, "view behavior"
         script_SetMetadataArray templateBehaviorScript, uRipArray
      end if
   end if
   
   lock screen
   --
   put the stack_Object of viewTemplate into viewTemplateStack
   set the defaultstack to viewTemplateStack
   if exists (card "View Behavior") then
      go to card "View Behavior"
   else
      create card "View Behavior"
      repeat for each line gID in the sharedgroupIDs of this card
         -- in case the template is a shared gorup or background
         remove group id gID from this card
      end repeat
   end if
   
   create button "View Behavior"
   put it into createdButton
   
   put vName && "behavior" into someLabel
   set the label of createdButton to someLabel
   set the width of createdButton to (the formattedwidth of createdButton + 12)
   set the topleft of createdButton to "50,50"
   
   set the script of createdButton to templateBehaviorScript
   set the customproperties ["uRIP"] of createdButton to uRipArray
   object_AddToGlobalArray tObject
   
   put "view" into uRipArray ["type"]
   put script_ConstuctMetaDataHeader (uRipArray) into newTemplateScript
   
   set the behavior of viewTemplate to createdButton
   set the script of viewTemplate to newTemplateScript
   -- set the view_Name ["view"] of viewTemplate to vName
   set the customproperties ["uRIP"] of viewTemplate to uRipArray
   
   get the view_IsTemplate of viewTemplate
   object_AddToGlobalArray viewTemplate
   
   go to card 1
   --
   unlock screen
   
   if pEditScripts is not false then
      edit the script of viewTemplate
      edit the script of createdButton
      if the shiftKey is "Down" then
         put view_ConstructBehaviorOutline() into viewFiles
         display_Outline viewFiles, "Behavior outline"
      end if
   end if
   set the defaultstack to oDefaultStack
   return createdButton
end view_TemplateAddBehavior

command view_SetTemplateNames vName
   -- utility to set the relevant names in a view stack
   put view_GetTemplateObject (vName) into templateView
   if exists(templateView) is false then return empty
   
   -- set the view_Name
   set the view_Name of templateView to vName
   
   -- check the behavior
   put the behavior of templateView into templateBehavior
   if exists (templateBehavior) is false then return false
   if the stack_Object of templateView = the stack_Object of templateBehavior then
      set the view_Name of templateBehavior to vName
   else
      -- it is a linked behavior so keep the original name of the behavior
      answer warning "Have reset the views view_Name. However this view uses a linked behavior, sot the behaviors view_Name has not been set!"
   end if
end view_SetTemplateNames


--> View | Template | Files
-
function view_TemplateObjectFromFile longStackName
   -- was "view_GetLibraryObjectFromFile"
   if exists(control 1 of card 1 of stack longStackName) then
      put the long id of control 1 of card 1 of stack longStackName into libraryObject
      return libraryObject
      
      if the object_IsView of libraryObject is true then	# check (could do more)
         return libraryObject
      else
         return empty
      end if
   else
      return empty
   end if
end view_TemplateObjectFromFile

function view_TemplateFiles
   put library_ViewFolder() into someFolder
   put folder_FilesInside(someFolder) into viewFiles
   return viewFiles
end view_TemplateFiles

function view_TemplateBehaviors pObjectFormat
   put view_TemplateFiles() into viewFiles
   
   put the mainstacks into oMainStacks
   set the wholematches to true
   repeat for each line someFile in viewFiles
      set the cursor to busy
      if exists (control 1 of card 1 of stack someFile) then
         put the long id of control 1 of card 1 of stack someFile into viewObject
         put the behavior of viewObject into libraryObject
         if exists (libraryObject) is false then next repeat
         
         switch pObjectFormat
            case "mobile_Name"
               put the long name of libraryObject into libraryObject
               object_SetShortStackName libraryObject, mainStackStart, mainStackEnd
               put libraryObject & CR after libraryObjects
               break
            case "mobile_ID"
               object_SetShortStackName libraryObject, mainStackStart, mainStackEnd
               put libraryObject & CR after libraryObjects
               break
            case "long id"
               put libraryObject & CR after libraryObjects
               break
            default -- case "rugged_ID"
               put the rugged_ID of libraryObject & CR after libraryObjects
         end switch
         
         if the short name of stack someFile is not among the lines of oMainStacks then
            -- re-release previously unloaded stack from memory
            delete stack someFile
         end if
      end if
   end repeat
   delete last char of libraryObjects
   return libraryObjects
end view_TemplateBehaviors

function view_TemplateNames
   return view_PathIndex (true)
end view_TemplateNames

function view_StackNames
   return view_PathIndex (true)
end view_StackNames

function view_ShortFiles
   put library_ViewFolder() into someFolder
   put folder_ShortFiles(someFolder) into shortFiles
   return shortFiles
end view_ShortFiles

command view_TrimFirstViewNameItem @vNames
   put replacetext (vNames, "(View\|)\W*", empty) into vNames
   return empty
   
   set the itemdelimiter to "|"
   repeat with lineNum = 1 to the number of lines of vNames
      delete item 1 of line lineNum of vNames 
   end repeat
end view_TrimFirstViewNameItem

function view_ListNames pStartFilter, pIncludeStem
   -- return view_PathIndex (includeStem)
   put hArray_ListViewNames() into vNames
   if pIncludeStem is not true then put replacetext (vNames, "(View\|)\W*", empty) into vNames
   if pStartFilter is empty then return vNames
   
   view_NormalizeName pStartFilter
   if pIncludeStem is not true then
      set the itemdelimiter to "|"
      delete item 1 of pStartFilter
   end if
   filter vNames with (pStartFilter & "*")
   return vNames
end view_ListNames

function view_FilteredPaths vName, pIncludeStem
   return view_ListNames (vName, pIncludeStem)
   
   view_NormalizeName vName
   put view_PathIndex (pIncludeStem) into viewPathIndex
   if vName is empty then return viewPathIndex
   if pIncludeStem is not true then put replacetext (vName, "View\W*", empty) into vName
   filter viewPathIndex with (vName & "*")
   return viewPathIndex
end view_FilteredPaths

function view_PathIndex includeStem
   return view_ListNames (empty, includeStem)
   return view_ListNamesOfStandardFiles()
end view_PathIndex

function view_ListNamesOfStandardFiles
   put view_ShortFiles() into shortFiles
   
   put empty into viewPaths
   repeat for each line someFile in shortFiles
      put view_FileToPath (someFile, includeStem) into viewPath
      put viewPath & CR after viewPaths
   end repeat
   delete last char of viewPaths
   return viewPaths
end view_ListNamesOfStandardFiles

function view_FileToPath someFile, includeStem
   set the itemdelimiter to "/"
   put last item of someFile into viewPath
   
   replace "_" with "|" in viewPath
   set the itemdelimiter to "."
   if item -1 of viewPath is among the items of "livecode.rev.opml.html" then delete last item of viewPath
   if includeStem is true then view_NormalizeName viewPath
   return viewPath
end view_FileToPath

function view_NameToFile viewPath, pFileExt
   put view_PathToShortFile (viewPath, pFileExt) into shortFile
   put library_ViewFolder (shortFile) into viewFile
   return viewFile
end view_NameToFile

function view_LongFiles
   -- was "view_GetLibraryStackFiles"
   put library_ViewFolder() into someFolder
   put folder_ShortFiles(someFolder) into shortFiles
   file_ShortToLong shortFiles, someFolder
   return shortFiles
end view_LongFiles

function view_PathToShortFile viewName, pFileExt
   view_NormalizeName viewName
   
   set the itemdelimiter to "|"
   if item 2 of viewName = "Compound" then
      put ".html" into someExension
   else if pFileExt is empty then
      put ".livecode" into someExension
      -- put ".rev" into someExension
   else
      put "." & pFileExt into someExension
   end if
   put rev_FixPath (viewName) into shortFile
   delete item 1 of shortFile
   replace "|" with "_" in shortFile
   put someExension after shortFile
   return shortFile
end view_PathToShortFile


--> Private
-
private command extractViewPropertyMenu someView, @propMenu, @publicProps  
   put empty into propMenu
   put empty into publicProps
   put the view_BehaviorScript of someView into viewBehaviorScript
   
   put viewBehaviorScript into setPropLines
   filter setPropLines with "setprop *"
   
   put viewBehaviorScript into getPropLines
   filter getPropLines with "getprop *"
   repeat for each line scriptLine in getPropLines
      put word 2 of scriptLine into gProp
      put gProp & CR after getProps
   end repeat
   delete char -1 of getProps
   
   set the wholeMatches to true
   sort setPropLines
   repeat for each line scriptLine in setPropLines
      put word 2 of scriptLine into someProp
      
      if someProp is among the items of "view_Rect" then next repeat
      if someProp is among the lines of foundProps then next repeat
      if someProp is not among the lines of getProps then next repeat
      
      put someProp & CR after foundProps
      try
         put someProp & CR after publicProps
         put someProp & CR after propMenu
         put word -1 of line 1 of scriptLine into setPropParam
         if setPropParam is among the items of "boolean,someBoolean" then
            get the someProp of someView
            if it is true then
               put tab & "!ctrue" & CR & tab & "false" & CR after propMenu
            else if it is false then
               put tab & "true" & CR & tab & "!cfalse" & CR after propMenu
            else -- could be empty ?
               put "(" before line -1 of propMenu
               put tab & "true" & CR & tab & "false" & CR after propMenu
            end if
         else
            if char - 1 of someProp = "y" then
               put char 1 to -2 of someProp & "ies" into somePropChoice
            else
               put someProp & "s" into somePropChoice
            end if
            
            if somePropChoice is among the lines of getProps then
               put the somePropChoice of someView into subMenu
            else
               put script_ExtractSetpropConditions (someProp, viewBehaviorScript) into subMenu
            end if
            
            if subMenu is not empty then
               replace comma with CR in subMenu
               put the someProp of someView into someMenuItem
               menu_SetCheckedItem someMenuItem, subMenu, true
               put outline_IncreaseIndent (subMenu, 1) & CR after propMenu
            end if
         end if
      catch someError
         put "(" before line -1 of propMenu
      end try
   end repeat
   delete char -1 of propMenu
   delete char -1 of publicProps
   return propMenu
end extractViewPropertyMenu

